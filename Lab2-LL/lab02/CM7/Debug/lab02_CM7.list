
lab02_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000208c  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002324  08002324  00003324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002344  08002344  00004010  2**0
                  CONTENTS
  4 .ARM          00000000  08002344  08002344  00004010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002344  08002344  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002344  08002344  00003344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002348  08002348  00003348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  24000000  0800234c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  24000010  0800235c  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000040  0800235c  00004040  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000088d1  00000000  00000000  0000403e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001843  00000000  00000000  0000c90f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000908  00000000  00000000  0000e158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006ac  00000000  00000000  0000ea60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003fb56  00000000  00000000  0000f10c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000090cb  00000000  00000000  0004ec62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019ec89  00000000  00000000  00057d2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001f69b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002378  00000000  00000000  001f69fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  001f8d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800230c 	.word	0x0800230c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	0800230c 	.word	0x0800230c

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3d      	ldr	r3, [pc, #244]	@ (80003d4 <SystemInit+0xfc>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002e2:	4a3c      	ldr	r2, [pc, #240]	@ (80003d4 <SystemInit+0xfc>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b39      	ldr	r3, [pc, #228]	@ (80003d4 <SystemInit+0xfc>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a38      	ldr	r2, [pc, #224]	@ (80003d4 <SystemInit+0xfc>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b37      	ldr	r3, [pc, #220]	@ (80003d8 <SystemInit+0x100>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b34      	ldr	r3, [pc, #208]	@ (80003d8 <SystemInit+0x100>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a32      	ldr	r2, [pc, #200]	@ (80003d8 <SystemInit+0x100>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b31      	ldr	r3, [pc, #196]	@ (80003dc <SystemInit+0x104>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a30      	ldr	r2, [pc, #192]	@ (80003dc <SystemInit+0x104>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b2e      	ldr	r3, [pc, #184]	@ (80003dc <SystemInit+0x104>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2d      	ldr	r3, [pc, #180]	@ (80003dc <SystemInit+0x104>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492c      	ldr	r1, [pc, #176]	@ (80003dc <SystemInit+0x104>)
 800032c:	4b2c      	ldr	r3, [pc, #176]	@ (80003e0 <SystemInit+0x108>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b29      	ldr	r3, [pc, #164]	@ (80003d8 <SystemInit+0x100>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b26      	ldr	r3, [pc, #152]	@ (80003d8 <SystemInit+0x100>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a24      	ldr	r2, [pc, #144]	@ (80003d8 <SystemInit+0x100>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b23      	ldr	r3, [pc, #140]	@ (80003dc <SystemInit+0x104>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b21      	ldr	r3, [pc, #132]	@ (80003dc <SystemInit+0x104>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b20      	ldr	r3, [pc, #128]	@ (80003dc <SystemInit+0x104>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b1e      	ldr	r3, [pc, #120]	@ (80003dc <SystemInit+0x104>)
 8000362:	4a20      	ldr	r2, [pc, #128]	@ (80003e4 <SystemInit+0x10c>)
 8000364:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1d      	ldr	r3, [pc, #116]	@ (80003dc <SystemInit+0x104>)
 8000368:	4a1f      	ldr	r2, [pc, #124]	@ (80003e8 <SystemInit+0x110>)
 800036a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1b      	ldr	r3, [pc, #108]	@ (80003dc <SystemInit+0x104>)
 800036e:	4a1f      	ldr	r2, [pc, #124]	@ (80003ec <SystemInit+0x114>)
 8000370:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1a      	ldr	r3, [pc, #104]	@ (80003dc <SystemInit+0x104>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b18      	ldr	r3, [pc, #96]	@ (80003dc <SystemInit+0x104>)
 800037a:	4a1c      	ldr	r2, [pc, #112]	@ (80003ec <SystemInit+0x114>)
 800037c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b17      	ldr	r3, [pc, #92]	@ (80003dc <SystemInit+0x104>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b15      	ldr	r3, [pc, #84]	@ (80003dc <SystemInit+0x104>)
 8000386:	4a19      	ldr	r2, [pc, #100]	@ (80003ec <SystemInit+0x114>)
 8000388:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b14      	ldr	r3, [pc, #80]	@ (80003dc <SystemInit+0x104>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b12      	ldr	r3, [pc, #72]	@ (80003dc <SystemInit+0x104>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a11      	ldr	r2, [pc, #68]	@ (80003dc <SystemInit+0x104>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b0f      	ldr	r3, [pc, #60]	@ (80003dc <SystemInit+0x104>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b13      	ldr	r3, [pc, #76]	@ (80003f0 <SystemInit+0x118>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003a6:	4a12      	ldr	r2, [pc, #72]	@ (80003f0 <SystemInit+0x118>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b11      	ldr	r3, [pc, #68]	@ (80003f4 <SystemInit+0x11c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b11      	ldr	r3, [pc, #68]	@ (80003f8 <SystemInit+0x120>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	@ (80003fc <SystemInit+0x124>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000400 <SystemInit+0x128>)
 80003c4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	e000ed00 	.word	0xe000ed00
 80003d8:	52002000 	.word	0x52002000
 80003dc:	58024400 	.word	0x58024400
 80003e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80003e4:	02020200 	.word	0x02020200
 80003e8:	01ff0000 	.word	0x01ff0000
 80003ec:	01010280 	.word	0x01010280
 80003f0:	580000c0 	.word	0x580000c0
 80003f4:	5c001000 	.word	0x5c001000
 80003f8:	ffff0000 	.word	0xffff0000
 80003fc:	51008108 	.word	0x51008108
 8000400:	52004000 	.word	0x52004000

08000404 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
 800040c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	691a      	ldr	r2, [r3, #16]
 8000412:	683b      	ldr	r3, [r7, #0]
 8000414:	4013      	ands	r3, r2
 8000416:	683a      	ldr	r2, [r7, #0]
 8000418:	429a      	cmp	r2, r3
 800041a:	d101      	bne.n	8000420 <LL_GPIO_IsInputPinSet+0x1c>
 800041c:	2301      	movs	r3, #1
 800041e:	e000      	b.n	8000422 <LL_GPIO_IsInputPinSet+0x1e>
 8000420:	2300      	movs	r3, #0
}
 8000422:	4618      	mov	r0, r3
 8000424:	370c      	adds	r7, #12
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr

0800042e <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800042e:	b480      	push	{r7}
 8000430:	b083      	sub	sp, #12
 8000432:	af00      	add	r7, sp, #0
 8000434:	6078      	str	r0, [r7, #4]
 8000436:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	683a      	ldr	r2, [r7, #0]
 800043c:	619a      	str	r2, [r3, #24]
}
 800043e:	bf00      	nop
 8000440:	370c      	adds	r7, #12
 8000442:	46bd      	mov	sp, r7
 8000444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000448:	4770      	bx	lr

0800044a <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800044a:	b480      	push	{r7}
 800044c:	b083      	sub	sp, #12
 800044e:	af00      	add	r7, sp, #0
 8000450:	6078      	str	r0, [r7, #4]
 8000452:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 8000454:	683b      	ldr	r3, [r7, #0]
 8000456:	041a      	lsls	r2, r3, #16
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	619a      	str	r2, [r3, #24]
}
 800045c:	bf00      	nop
 800045e:	370c      	adds	r7, #12
 8000460:	46bd      	mov	sp, r7
 8000462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000466:	4770      	bx	lr

08000468 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000468:	b480      	push	{r7}
 800046a:	b085      	sub	sp, #20
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
 8000470:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8000478:	68fa      	ldr	r2, [r7, #12]
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	4013      	ands	r3, r2
 800047e:	041a      	lsls	r2, r3, #16
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	43d9      	mvns	r1, r3
 8000484:	683b      	ldr	r3, [r7, #0]
 8000486:	400b      	ands	r3, r1
 8000488:	431a      	orrs	r2, r3
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	619a      	str	r2, [r3, #24]
}
 800048e:	bf00      	nop
 8000490:	3714      	adds	r7, #20
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr
	...

0800049c <LL_AHB4_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB4_GRP1_EnableClock(uint32_t Periphs)
{
 800049c:	b480      	push	{r7}
 800049e:	b085      	sub	sp, #20
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB4ENR, Periphs);
 80004a4:	4b0a      	ldr	r3, [pc, #40]	@ (80004d0 <LL_AHB4_GRP1_EnableClock+0x34>)
 80004a6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80004aa:	4909      	ldr	r1, [pc, #36]	@ (80004d0 <LL_AHB4_GRP1_EnableClock+0x34>)
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	4313      	orrs	r3, r2
 80004b0:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 80004b4:	4b06      	ldr	r3, [pc, #24]	@ (80004d0 <LL_AHB4_GRP1_EnableClock+0x34>)
 80004b6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	4013      	ands	r3, r2
 80004be:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004c0:	68fb      	ldr	r3, [r7, #12]
}
 80004c2:	bf00      	nop
 80004c4:	3714      	adds	r7, #20
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	58024400 	.word	0x58024400

080004d4 <toggle_a0>:

uint32_t my_initialized_var = 200;
uint32_t my_initialized_var1 = 300;
uint32_t my_initialized_var2 = 400;

void toggle_a0() {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
    LL_GPIO_TogglePin(GPIOI, a0_Pin);
 80004d8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80004dc:	4807      	ldr	r0, [pc, #28]	@ (80004fc <toggle_a0+0x28>)
 80004de:	f7ff ffc3 	bl	8000468 <LL_GPIO_TogglePin>
    a0_state = !a0_state;
 80004e2:	4b07      	ldr	r3, [pc, #28]	@ (8000500 <toggle_a0+0x2c>)
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	bf0c      	ite	eq
 80004ea:	2301      	moveq	r3, #1
 80004ec:	2300      	movne	r3, #0
 80004ee:	b2db      	uxtb	r3, r3
 80004f0:	461a      	mov	r2, r3
 80004f2:	4b03      	ldr	r3, [pc, #12]	@ (8000500 <toggle_a0+0x2c>)
 80004f4:	701a      	strb	r2, [r3, #0]
}
 80004f6:	bf00      	nop
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	58022000 	.word	0x58022000
 8000500:	24000036 	.word	0x24000036

08000504 <toggle_a1>:
void toggle_a1() {
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
    LL_GPIO_TogglePin(GPIOI, a1_Pin);
 8000508:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800050c:	4807      	ldr	r0, [pc, #28]	@ (800052c <toggle_a1+0x28>)
 800050e:	f7ff ffab 	bl	8000468 <LL_GPIO_TogglePin>
    a1_state = !a1_state;
 8000512:	4b07      	ldr	r3, [pc, #28]	@ (8000530 <toggle_a1+0x2c>)
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	2b00      	cmp	r3, #0
 8000518:	bf0c      	ite	eq
 800051a:	2301      	moveq	r3, #1
 800051c:	2300      	movne	r3, #0
 800051e:	b2db      	uxtb	r3, r3
 8000520:	461a      	mov	r2, r3
 8000522:	4b03      	ldr	r3, [pc, #12]	@ (8000530 <toggle_a1+0x2c>)
 8000524:	701a      	strb	r2, [r3, #0]
}
 8000526:	bf00      	nop
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	58022000 	.word	0x58022000
 8000530:	24000037 	.word	0x24000037

08000534 <toggle_a2>:
void toggle_a2() {
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
    LL_GPIO_TogglePin(GPIOI, a2_Pin);
 8000538:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800053c:	4807      	ldr	r0, [pc, #28]	@ (800055c <toggle_a2+0x28>)
 800053e:	f7ff ff93 	bl	8000468 <LL_GPIO_TogglePin>
    a2_state = !a2_state;
 8000542:	4b07      	ldr	r3, [pc, #28]	@ (8000560 <toggle_a2+0x2c>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	2b00      	cmp	r3, #0
 8000548:	bf0c      	ite	eq
 800054a:	2301      	moveq	r3, #1
 800054c:	2300      	movne	r3, #0
 800054e:	b2db      	uxtb	r3, r3
 8000550:	461a      	mov	r2, r3
 8000552:	4b03      	ldr	r3, [pc, #12]	@ (8000560 <toggle_a2+0x2c>)
 8000554:	701a      	strb	r2, [r3, #0]
}
 8000556:	bf00      	nop
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	58022000 	.word	0x58022000
 8000560:	24000038 	.word	0x24000038

08000564 <toggle_a3>:
void toggle_a3() {
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
    LL_GPIO_TogglePin(GPIOI, a3_Pin);
 8000568:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800056c:	4807      	ldr	r0, [pc, #28]	@ (800058c <toggle_a3+0x28>)
 800056e:	f7ff ff7b 	bl	8000468 <LL_GPIO_TogglePin>
    a3_state = !a3_state;
 8000572:	4b07      	ldr	r3, [pc, #28]	@ (8000590 <toggle_a3+0x2c>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2b00      	cmp	r3, #0
 8000578:	bf0c      	ite	eq
 800057a:	2301      	moveq	r3, #1
 800057c:	2300      	movne	r3, #0
 800057e:	b2db      	uxtb	r3, r3
 8000580:	461a      	mov	r2, r3
 8000582:	4b03      	ldr	r3, [pc, #12]	@ (8000590 <toggle_a3+0x2c>)
 8000584:	701a      	strb	r2, [r3, #0]
}
 8000586:	bf00      	nop
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	58022000 	.word	0x58022000
 8000590:	24000039 	.word	0x24000039

08000594 <update_led_states>:

void update_led_states(void) {
 8000594:	b590      	push	{r4, r7, lr}
 8000596:	b08b      	sub	sp, #44	@ 0x2c
 8000598:	af00      	add	r7, sp, #0
    uint32_t pins[] = {a0_Pin, a1_Pin, a2_Pin, a3_Pin};
 800059a:	4b1e      	ldr	r3, [pc, #120]	@ (8000614 <update_led_states+0x80>)
 800059c:	f107 0414 	add.w	r4, r7, #20
 80005a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int states[] = {a0_state, a1_state, a2_state, a3_state};
 80005a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000618 <update_led_states+0x84>)
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	4b1b      	ldr	r3, [pc, #108]	@ (800061c <update_led_states+0x88>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	60bb      	str	r3, [r7, #8]
 80005b2:	4b1b      	ldr	r3, [pc, #108]	@ (8000620 <update_led_states+0x8c>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	4b1a      	ldr	r3, [pc, #104]	@ (8000624 <update_led_states+0x90>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	613b      	str	r3, [r7, #16]

    for (int i = 0; i < 4; i++) {
 80005be:	2300      	movs	r3, #0
 80005c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80005c2:	e01f      	b.n	8000604 <update_led_states+0x70>
        if (states[i] == 0) {
 80005c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005c6:	009b      	lsls	r3, r3, #2
 80005c8:	3328      	adds	r3, #40	@ 0x28
 80005ca:	443b      	add	r3, r7
 80005cc:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d10a      	bne.n	80005ea <update_led_states+0x56>
            LL_GPIO_SetOutputPin(GPIOI, pins[i]);
 80005d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005d6:	009b      	lsls	r3, r3, #2
 80005d8:	3328      	adds	r3, #40	@ 0x28
 80005da:	443b      	add	r3, r7
 80005dc:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80005e0:	4619      	mov	r1, r3
 80005e2:	4811      	ldr	r0, [pc, #68]	@ (8000628 <update_led_states+0x94>)
 80005e4:	f7ff ff23 	bl	800042e <LL_GPIO_SetOutputPin>
 80005e8:	e009      	b.n	80005fe <update_led_states+0x6a>
        } else {
            LL_GPIO_ResetOutputPin(GPIOI, pins[i]);
 80005ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005ec:	009b      	lsls	r3, r3, #2
 80005ee:	3328      	adds	r3, #40	@ 0x28
 80005f0:	443b      	add	r3, r7
 80005f2:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80005f6:	4619      	mov	r1, r3
 80005f8:	480b      	ldr	r0, [pc, #44]	@ (8000628 <update_led_states+0x94>)
 80005fa:	f7ff ff26 	bl	800044a <LL_GPIO_ResetOutputPin>
    for (int i = 0; i < 4; i++) {
 80005fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000600:	3301      	adds	r3, #1
 8000602:	627b      	str	r3, [r7, #36]	@ 0x24
 8000604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000606:	2b03      	cmp	r3, #3
 8000608:	dddc      	ble.n	80005c4 <update_led_states+0x30>
        }
    }
}
 800060a:	bf00      	nop
 800060c:	bf00      	nop
 800060e:	372c      	adds	r7, #44	@ 0x2c
 8000610:	46bd      	mov	sp, r7
 8000612:	bd90      	pop	{r4, r7, pc}
 8000614:	08002324 	.word	0x08002324
 8000618:	24000036 	.word	0x24000036
 800061c:	24000037 	.word	0x24000037
 8000620:	24000038 	.word	0x24000038
 8000624:	24000039 	.word	0x24000039
 8000628:	58022000 	.word	0x58022000

0800062c <update_input_states>:

void update_input_states()
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
	up_last_state = up_current_state;
 8000630:	4b0a      	ldr	r3, [pc, #40]	@ (800065c <update_input_states+0x30>)
 8000632:	781a      	ldrb	r2, [r3, #0]
 8000634:	4b0a      	ldr	r3, [pc, #40]	@ (8000660 <update_input_states+0x34>)
 8000636:	701a      	strb	r2, [r3, #0]
	down_last_state = down_current_state;
 8000638:	4b0a      	ldr	r3, [pc, #40]	@ (8000664 <update_input_states+0x38>)
 800063a:	781a      	ldrb	r2, [r3, #0]
 800063c:	4b0a      	ldr	r3, [pc, #40]	@ (8000668 <update_input_states+0x3c>)
 800063e:	701a      	strb	r2, [r3, #0]
	left_last_state = left_current_state;
 8000640:	4b0a      	ldr	r3, [pc, #40]	@ (800066c <update_input_states+0x40>)
 8000642:	781a      	ldrb	r2, [r3, #0]
 8000644:	4b0a      	ldr	r3, [pc, #40]	@ (8000670 <update_input_states+0x44>)
 8000646:	701a      	strb	r2, [r3, #0]
	right_last_state = right_current_state;
 8000648:	4b0a      	ldr	r3, [pc, #40]	@ (8000674 <update_input_states+0x48>)
 800064a:	781a      	ldrb	r2, [r3, #0]
 800064c:	4b0a      	ldr	r3, [pc, #40]	@ (8000678 <update_input_states+0x4c>)
 800064e:	701a      	strb	r2, [r3, #0]
}
 8000650:	bf00      	nop
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	2400002d 	.word	0x2400002d
 8000660:	2400002c 	.word	0x2400002c
 8000664:	2400002f 	.word	0x2400002f
 8000668:	2400002e 	.word	0x2400002e
 800066c:	24000031 	.word	0x24000031
 8000670:	24000030 	.word	0x24000030
 8000674:	24000033 	.word	0x24000033
 8000678:	24000032 	.word	0x24000032

0800067c <initialize_leds>:

void initialize_leds(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	leds_locked = 0;
 8000680:	4b09      	ldr	r3, [pc, #36]	@ (80006a8 <initialize_leds+0x2c>)
 8000682:	2200      	movs	r2, #0
 8000684:	701a      	strb	r2, [r3, #0]
	a0_state = 0;
 8000686:	4b09      	ldr	r3, [pc, #36]	@ (80006ac <initialize_leds+0x30>)
 8000688:	2200      	movs	r2, #0
 800068a:	701a      	strb	r2, [r3, #0]
	a1_state = 0;
 800068c:	4b08      	ldr	r3, [pc, #32]	@ (80006b0 <initialize_leds+0x34>)
 800068e:	2200      	movs	r2, #0
 8000690:	701a      	strb	r2, [r3, #0]
	a2_state = 1;
 8000692:	4b08      	ldr	r3, [pc, #32]	@ (80006b4 <initialize_leds+0x38>)
 8000694:	2201      	movs	r2, #1
 8000696:	701a      	strb	r2, [r3, #0]
	a3_state = 0;
 8000698:	4b07      	ldr	r3, [pc, #28]	@ (80006b8 <initialize_leds+0x3c>)
 800069a:	2200      	movs	r2, #0
 800069c:	701a      	strb	r2, [r3, #0]
	update_led_states();
 800069e:	f7ff ff79 	bl	8000594 <update_led_states>
}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	2400003a 	.word	0x2400003a
 80006ac:	24000036 	.word	0x24000036
 80006b0:	24000037 	.word	0x24000037
 80006b4:	24000038 	.word	0x24000038
 80006b8:	24000039 	.word	0x24000039

080006bc <turn_off_all>:

void turn_off_all(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
	a0_state = 0;
 80006c0:	4b07      	ldr	r3, [pc, #28]	@ (80006e0 <turn_off_all+0x24>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	701a      	strb	r2, [r3, #0]
	a1_state = 0;
 80006c6:	4b07      	ldr	r3, [pc, #28]	@ (80006e4 <turn_off_all+0x28>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	701a      	strb	r2, [r3, #0]
	a2_state = 0;
 80006cc:	4b06      	ldr	r3, [pc, #24]	@ (80006e8 <turn_off_all+0x2c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	701a      	strb	r2, [r3, #0]
	a3_state = 0;
 80006d2:	4b06      	ldr	r3, [pc, #24]	@ (80006ec <turn_off_all+0x30>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	701a      	strb	r2, [r3, #0]
	update_led_states();
 80006d8:	f7ff ff5c 	bl	8000594 <update_led_states>
}
 80006dc:	bf00      	nop
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	24000036 	.word	0x24000036
 80006e4:	24000037 	.word	0x24000037
 80006e8:	24000038 	.word	0x24000038
 80006ec:	24000039 	.word	0x24000039

080006f0 <initialize_inputs>:

void initialize_inputs(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
    up_current_state = LL_GPIO_IsInputPinSet(GPIOK, JUP_Pin);
 80006f4:	2140      	movs	r1, #64	@ 0x40
 80006f6:	4814      	ldr	r0, [pc, #80]	@ (8000748 <initialize_inputs+0x58>)
 80006f8:	f7ff fe84 	bl	8000404 <LL_GPIO_IsInputPinSet>
 80006fc:	4603      	mov	r3, r0
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	4b12      	ldr	r3, [pc, #72]	@ (800074c <initialize_inputs+0x5c>)
 8000702:	701a      	strb	r2, [r3, #0]
    down_current_state = LL_GPIO_IsInputPinSet(GPIOK, JDOWN_Pin);
 8000704:	2108      	movs	r1, #8
 8000706:	4810      	ldr	r0, [pc, #64]	@ (8000748 <initialize_inputs+0x58>)
 8000708:	f7ff fe7c 	bl	8000404 <LL_GPIO_IsInputPinSet>
 800070c:	4603      	mov	r3, r0
 800070e:	b2da      	uxtb	r2, r3
 8000710:	4b0f      	ldr	r3, [pc, #60]	@ (8000750 <initialize_inputs+0x60>)
 8000712:	701a      	strb	r2, [r3, #0]
    left_current_state = LL_GPIO_IsInputPinSet(GPIOK, JLEFT_Pin);
 8000714:	2110      	movs	r1, #16
 8000716:	480c      	ldr	r0, [pc, #48]	@ (8000748 <initialize_inputs+0x58>)
 8000718:	f7ff fe74 	bl	8000404 <LL_GPIO_IsInputPinSet>
 800071c:	4603      	mov	r3, r0
 800071e:	b2da      	uxtb	r2, r3
 8000720:	4b0c      	ldr	r3, [pc, #48]	@ (8000754 <initialize_inputs+0x64>)
 8000722:	701a      	strb	r2, [r3, #0]
    right_current_state = LL_GPIO_IsInputPinSet(GPIOK, JRIGHT_Pin);
 8000724:	2120      	movs	r1, #32
 8000726:	4808      	ldr	r0, [pc, #32]	@ (8000748 <initialize_inputs+0x58>)
 8000728:	f7ff fe6c 	bl	8000404 <LL_GPIO_IsInputPinSet>
 800072c:	4603      	mov	r3, r0
 800072e:	b2da      	uxtb	r2, r3
 8000730:	4b09      	ldr	r3, [pc, #36]	@ (8000758 <initialize_inputs+0x68>)
 8000732:	701a      	strb	r2, [r3, #0]
    select_current_state = LL_GPIO_IsInputPinSet(GPIOK, JSEL_Pin);
 8000734:	2104      	movs	r1, #4
 8000736:	4804      	ldr	r0, [pc, #16]	@ (8000748 <initialize_inputs+0x58>)
 8000738:	f7ff fe64 	bl	8000404 <LL_GPIO_IsInputPinSet>
 800073c:	4603      	mov	r3, r0
 800073e:	b2da      	uxtb	r2, r3
 8000740:	4b06      	ldr	r3, [pc, #24]	@ (800075c <initialize_inputs+0x6c>)
 8000742:	701a      	strb	r2, [r3, #0]
}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	58022800 	.word	0x58022800
 800074c:	2400002d 	.word	0x2400002d
 8000750:	2400002f 	.word	0x2400002f
 8000754:	24000031 	.word	0x24000031
 8000758:	24000033 	.word	0x24000033
 800075c:	24000035 	.word	0x24000035

08000760 <handle_input>:
void handle_input(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
    initialize_inputs();
 8000766:	f7ff ffc3 	bl	80006f0 <initialize_inputs>
    if (leds_locked == 1) {
 800076a:	4b46      	ldr	r3, [pc, #280]	@ (8000884 <handle_input+0x124>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2b01      	cmp	r3, #1
 8000770:	f000 8083 	beq.w	800087a <handle_input+0x11a>
        return;
    }
    if (up_last_state == GPIO_PIN_RESET && up_current_state == GPIO_PIN_SET) {
 8000774:	4b44      	ldr	r3, [pc, #272]	@ (8000888 <handle_input+0x128>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d11e      	bne.n	80007ba <handle_input+0x5a>
 800077c:	4b43      	ldr	r3, [pc, #268]	@ (800088c <handle_input+0x12c>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	2b01      	cmp	r3, #1
 8000782:	d11a      	bne.n	80007ba <handle_input+0x5a>
        if (a0_state == 0) {
 8000784:	4b42      	ldr	r3, [pc, #264]	@ (8000890 <handle_input+0x130>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d102      	bne.n	8000792 <handle_input+0x32>
            toggle_a0();
 800078c:	f7ff fea2 	bl	80004d4 <toggle_a0>
 8000790:	e013      	b.n	80007ba <handle_input+0x5a>
        } else if (a1_state == 0) {
 8000792:	4b40      	ldr	r3, [pc, #256]	@ (8000894 <handle_input+0x134>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d102      	bne.n	80007a0 <handle_input+0x40>
            toggle_a1();
 800079a:	f7ff feb3 	bl	8000504 <toggle_a1>
 800079e:	e00c      	b.n	80007ba <handle_input+0x5a>
        } else if (a2_state == 0) {
 80007a0:	4b3d      	ldr	r3, [pc, #244]	@ (8000898 <handle_input+0x138>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d102      	bne.n	80007ae <handle_input+0x4e>
            toggle_a2();
 80007a8:	f7ff fec4 	bl	8000534 <toggle_a2>
 80007ac:	e005      	b.n	80007ba <handle_input+0x5a>
        } else if (a3_state == 0) {
 80007ae:	4b3b      	ldr	r3, [pc, #236]	@ (800089c <handle_input+0x13c>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d101      	bne.n	80007ba <handle_input+0x5a>
            toggle_a3();
 80007b6:	f7ff fed5 	bl	8000564 <toggle_a3>
        }
    }

    if (down_last_state == GPIO_PIN_RESET && down_current_state == GPIO_PIN_SET) {
 80007ba:	4b39      	ldr	r3, [pc, #228]	@ (80008a0 <handle_input+0x140>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d11e      	bne.n	8000800 <handle_input+0xa0>
 80007c2:	4b38      	ldr	r3, [pc, #224]	@ (80008a4 <handle_input+0x144>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d11a      	bne.n	8000800 <handle_input+0xa0>
        if (a3_state == 1) {
 80007ca:	4b34      	ldr	r3, [pc, #208]	@ (800089c <handle_input+0x13c>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2b01      	cmp	r3, #1
 80007d0:	d102      	bne.n	80007d8 <handle_input+0x78>
            toggle_a3();
 80007d2:	f7ff fec7 	bl	8000564 <toggle_a3>
 80007d6:	e013      	b.n	8000800 <handle_input+0xa0>
        } else if (a2_state == 1) {
 80007d8:	4b2f      	ldr	r3, [pc, #188]	@ (8000898 <handle_input+0x138>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2b01      	cmp	r3, #1
 80007de:	d102      	bne.n	80007e6 <handle_input+0x86>
            toggle_a2();
 80007e0:	f7ff fea8 	bl	8000534 <toggle_a2>
 80007e4:	e00c      	b.n	8000800 <handle_input+0xa0>
        } else if (a1_state == 1) {
 80007e6:	4b2b      	ldr	r3, [pc, #172]	@ (8000894 <handle_input+0x134>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d102      	bne.n	80007f4 <handle_input+0x94>
            toggle_a1();
 80007ee:	f7ff fe89 	bl	8000504 <toggle_a1>
 80007f2:	e005      	b.n	8000800 <handle_input+0xa0>
        } else if (a0_state == 1) {
 80007f4:	4b26      	ldr	r3, [pc, #152]	@ (8000890 <handle_input+0x130>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d101      	bne.n	8000800 <handle_input+0xa0>
            toggle_a0();
 80007fc:	f7ff fe6a 	bl	80004d4 <toggle_a0>
        }
    }

    if (left_last_state == GPIO_PIN_RESET && left_current_state == GPIO_PIN_SET) {
 8000800:	4b29      	ldr	r3, [pc, #164]	@ (80008a8 <handle_input+0x148>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d118      	bne.n	800083a <handle_input+0xda>
 8000808:	4b28      	ldr	r3, [pc, #160]	@ (80008ac <handle_input+0x14c>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	2b01      	cmp	r3, #1
 800080e:	d114      	bne.n	800083a <handle_input+0xda>
        int temp_left = a0_state;
 8000810:	4b1f      	ldr	r3, [pc, #124]	@ (8000890 <handle_input+0x130>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	607b      	str	r3, [r7, #4]
        a0_state = a3_state;
 8000816:	4b21      	ldr	r3, [pc, #132]	@ (800089c <handle_input+0x13c>)
 8000818:	781a      	ldrb	r2, [r3, #0]
 800081a:	4b1d      	ldr	r3, [pc, #116]	@ (8000890 <handle_input+0x130>)
 800081c:	701a      	strb	r2, [r3, #0]
        a3_state = a2_state;
 800081e:	4b1e      	ldr	r3, [pc, #120]	@ (8000898 <handle_input+0x138>)
 8000820:	781a      	ldrb	r2, [r3, #0]
 8000822:	4b1e      	ldr	r3, [pc, #120]	@ (800089c <handle_input+0x13c>)
 8000824:	701a      	strb	r2, [r3, #0]
        a2_state = a1_state;
 8000826:	4b1b      	ldr	r3, [pc, #108]	@ (8000894 <handle_input+0x134>)
 8000828:	781a      	ldrb	r2, [r3, #0]
 800082a:	4b1b      	ldr	r3, [pc, #108]	@ (8000898 <handle_input+0x138>)
 800082c:	701a      	strb	r2, [r3, #0]
        a1_state = temp_left;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	b2da      	uxtb	r2, r3
 8000832:	4b18      	ldr	r3, [pc, #96]	@ (8000894 <handle_input+0x134>)
 8000834:	701a      	strb	r2, [r3, #0]
        update_led_states();
 8000836:	f7ff fead 	bl	8000594 <update_led_states>
    }

    if (right_last_state == GPIO_PIN_RESET && right_current_state == GPIO_PIN_SET) {
 800083a:	4b1d      	ldr	r3, [pc, #116]	@ (80008b0 <handle_input+0x150>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d118      	bne.n	8000874 <handle_input+0x114>
 8000842:	4b1c      	ldr	r3, [pc, #112]	@ (80008b4 <handle_input+0x154>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	2b01      	cmp	r3, #1
 8000848:	d114      	bne.n	8000874 <handle_input+0x114>
        int temp_left = a0_state;
 800084a:	4b11      	ldr	r3, [pc, #68]	@ (8000890 <handle_input+0x130>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	603b      	str	r3, [r7, #0]
        a0_state = a1_state;
 8000850:	4b10      	ldr	r3, [pc, #64]	@ (8000894 <handle_input+0x134>)
 8000852:	781a      	ldrb	r2, [r3, #0]
 8000854:	4b0e      	ldr	r3, [pc, #56]	@ (8000890 <handle_input+0x130>)
 8000856:	701a      	strb	r2, [r3, #0]
        a1_state = a2_state;
 8000858:	4b0f      	ldr	r3, [pc, #60]	@ (8000898 <handle_input+0x138>)
 800085a:	781a      	ldrb	r2, [r3, #0]
 800085c:	4b0d      	ldr	r3, [pc, #52]	@ (8000894 <handle_input+0x134>)
 800085e:	701a      	strb	r2, [r3, #0]
        a2_state = a3_state;
 8000860:	4b0e      	ldr	r3, [pc, #56]	@ (800089c <handle_input+0x13c>)
 8000862:	781a      	ldrb	r2, [r3, #0]
 8000864:	4b0c      	ldr	r3, [pc, #48]	@ (8000898 <handle_input+0x138>)
 8000866:	701a      	strb	r2, [r3, #0]
        a3_state = temp_left;
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	b2da      	uxtb	r2, r3
 800086c:	4b0b      	ldr	r3, [pc, #44]	@ (800089c <handle_input+0x13c>)
 800086e:	701a      	strb	r2, [r3, #0]
        update_led_states();
 8000870:	f7ff fe90 	bl	8000594 <update_led_states>
    }

    update_input_states();
 8000874:	f7ff feda 	bl	800062c <update_input_states>
 8000878:	e000      	b.n	800087c <handle_input+0x11c>
        return;
 800087a:	bf00      	nop
}
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	2400003a 	.word	0x2400003a
 8000888:	2400002c 	.word	0x2400002c
 800088c:	2400002d 	.word	0x2400002d
 8000890:	24000036 	.word	0x24000036
 8000894:	24000037 	.word	0x24000037
 8000898:	24000038 	.word	0x24000038
 800089c:	24000039 	.word	0x24000039
 80008a0:	2400002e 	.word	0x2400002e
 80008a4:	2400002f 	.word	0x2400002f
 80008a8:	24000030 	.word	0x24000030
 80008ac:	24000031 	.word	0x24000031
 80008b0:	24000032 	.word	0x24000032
 80008b4:	24000033 	.word	0x24000033

080008b8 <lock_leds>:

void lock_leds(void) { leds_locked = 1; }
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
 80008bc:	4b03      	ldr	r3, [pc, #12]	@ (80008cc <lock_leds+0x14>)
 80008be:	2201      	movs	r2, #1
 80008c0:	701a      	strb	r2, [r3, #0]
 80008c2:	bf00      	nop
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr
 80008cc:	2400003a 	.word	0x2400003a

080008d0 <unlock_leds>:
void unlock_leds(void) { leds_locked = 0; }
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	4b03      	ldr	r3, [pc, #12]	@ (80008e4 <unlock_leds+0x14>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	701a      	strb	r2, [r3, #0]
 80008da:	bf00      	nop
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr
 80008e4:	2400003a 	.word	0x2400003a

080008e8 <reset_leds>:
void reset_leds(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
    a0_state = 0;
 80008ec:	4b09      	ldr	r3, [pc, #36]	@ (8000914 <reset_leds+0x2c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	701a      	strb	r2, [r3, #0]
    a1_state = 0;
 80008f2:	4b09      	ldr	r3, [pc, #36]	@ (8000918 <reset_leds+0x30>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	701a      	strb	r2, [r3, #0]
    a2_state = 0;
 80008f8:	4b08      	ldr	r3, [pc, #32]	@ (800091c <reset_leds+0x34>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	701a      	strb	r2, [r3, #0]
    a3_state = 0;
 80008fe:	4b08      	ldr	r3, [pc, #32]	@ (8000920 <reset_leds+0x38>)
 8000900:	2200      	movs	r2, #0
 8000902:	701a      	strb	r2, [r3, #0]
    update_led_states();
 8000904:	f7ff fe46 	bl	8000594 <update_led_states>
    leds_locked = 1;
 8000908:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <reset_leds+0x3c>)
 800090a:	2201      	movs	r2, #1
 800090c:	701a      	strb	r2, [r3, #0]
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	24000036 	.word	0x24000036
 8000918:	24000037 	.word	0x24000037
 800091c:	24000038 	.word	0x24000038
 8000920:	24000039 	.word	0x24000039
 8000924:	2400003a 	.word	0x2400003a

08000928 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800092e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000932:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000934:	bf00      	nop
 8000936:	4b40      	ldr	r3, [pc, #256]	@ (8000a38 <main+0x110>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800093e:	2b00      	cmp	r3, #0
 8000940:	d004      	beq.n	800094c <main+0x24>
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	1e5a      	subs	r2, r3, #1
 8000946:	607a      	str	r2, [r7, #4]
 8000948:	2b00      	cmp	r3, #0
 800094a:	dcf4      	bgt.n	8000936 <main+0xe>
  if ( timeout < 0 )
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2b00      	cmp	r3, #0
 8000950:	da01      	bge.n	8000956 <main+0x2e>
  {
  Error_Handler();
 8000952:	f000 f931 	bl	8000bb8 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000956:	f000 f9a9 	bl	8000cac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800095a:	f000 f877 	bl	8000a4c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800095e:	4b36      	ldr	r3, [pc, #216]	@ (8000a38 <main+0x110>)
 8000960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000964:	4a34      	ldr	r2, [pc, #208]	@ (8000a38 <main+0x110>)
 8000966:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800096a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800096e:	4b32      	ldr	r3, [pc, #200]	@ (8000a38 <main+0x110>)
 8000970:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000974:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000978:	603b      	str	r3, [r7, #0]
 800097a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800097c:	2000      	movs	r0, #0
 800097e:	f000 fb17 	bl	8000fb0 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000982:	2100      	movs	r1, #0
 8000984:	2000      	movs	r0, #0
 8000986:	f000 fb2d 	bl	8000fe4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800098a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800098e:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000990:	bf00      	nop
 8000992:	4b29      	ldr	r3, [pc, #164]	@ (8000a38 <main+0x110>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800099a:	2b00      	cmp	r3, #0
 800099c:	d104      	bne.n	80009a8 <main+0x80>
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	1e5a      	subs	r2, r3, #1
 80009a2:	607a      	str	r2, [r7, #4]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	dcf4      	bgt.n	8000992 <main+0x6a>
if ( timeout < 0 )
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	da01      	bge.n	80009b2 <main+0x8a>
{
Error_Handler();
 80009ae:	f000 f903 	bl	8000bb8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b2:	f000 f8c5 	bl	8000b40 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  reset_leds();
 80009b6:	f7ff ff97 	bl	80008e8 <reset_leds>
  initialize_leds();
 80009ba:	f7ff fe5f 	bl	800067c <initialize_leds>
  turn_off_all();
 80009be:	f7ff fe7d 	bl	80006bc <turn_off_all>
  lock_leds();
 80009c2:	f7ff ff79 	bl	80008b8 <lock_leds>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  handle_input();
 80009c6:	f7ff fecb 	bl	8000760 <handle_input>

	 	  select_current_state = LL_GPIO_IsInputPinSet(GPIOK, JSEL_Pin);
 80009ca:	2104      	movs	r1, #4
 80009cc:	481b      	ldr	r0, [pc, #108]	@ (8000a3c <main+0x114>)
 80009ce:	f7ff fd19 	bl	8000404 <LL_GPIO_IsInputPinSet>
 80009d2:	4603      	mov	r3, r0
 80009d4:	b2da      	uxtb	r2, r3
 80009d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a40 <main+0x118>)
 80009d8:	701a      	strb	r2, [r3, #0]
	 	  if (select_last_state == GPIO_PIN_RESET && select_current_state == GPIO_PIN_SET) {
 80009da:	4b1a      	ldr	r3, [pc, #104]	@ (8000a44 <main+0x11c>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d122      	bne.n	8000a28 <main+0x100>
 80009e2:	4b17      	ldr	r3, [pc, #92]	@ (8000a40 <main+0x118>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d11e      	bne.n	8000a28 <main+0x100>
	 		  if (select_off == 0)
 80009ea:	4b17      	ldr	r3, [pc, #92]	@ (8000a48 <main+0x120>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d105      	bne.n	80009fe <main+0xd6>
	 		  {
	 			  turn_off_all();
 80009f2:	f7ff fe63 	bl	80006bc <turn_off_all>
	 			  select_off = 1;
 80009f6:	4b14      	ldr	r3, [pc, #80]	@ (8000a48 <main+0x120>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	701a      	strb	r2, [r3, #0]
 80009fc:	e014      	b.n	8000a28 <main+0x100>
	 		  } else if (select_off == 1)
 80009fe:	4b12      	ldr	r3, [pc, #72]	@ (8000a48 <main+0x120>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d107      	bne.n	8000a16 <main+0xee>
	 		  {
	 			  unlock_leds();
 8000a06:	f7ff ff63 	bl	80008d0 <unlock_leds>
	 			  initialize_leds();
 8000a0a:	f7ff fe37 	bl	800067c <initialize_leds>
	 			  select_off = 2;
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a48 <main+0x120>)
 8000a10:	2202      	movs	r2, #2
 8000a12:	701a      	strb	r2, [r3, #0]
 8000a14:	e008      	b.n	8000a28 <main+0x100>
	 		  } else if (select_off == 2)
 8000a16:	4b0c      	ldr	r3, [pc, #48]	@ (8000a48 <main+0x120>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	2b02      	cmp	r3, #2
 8000a1c:	d104      	bne.n	8000a28 <main+0x100>
	 		  {
	 			  lock_leds();
 8000a1e:	f7ff ff4b 	bl	80008b8 <lock_leds>
	 			  select_off = 0;
 8000a22:	4b09      	ldr	r3, [pc, #36]	@ (8000a48 <main+0x120>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	701a      	strb	r2, [r3, #0]
	 		  }
	 	  }
	 	  select_last_state = select_current_state;
 8000a28:	4b05      	ldr	r3, [pc, #20]	@ (8000a40 <main+0x118>)
 8000a2a:	781a      	ldrb	r2, [r3, #0]
 8000a2c:	4b05      	ldr	r3, [pc, #20]	@ (8000a44 <main+0x11c>)
 8000a2e:	701a      	strb	r2, [r3, #0]
	 	  LL_mDelay(20);
 8000a30:	2014      	movs	r0, #20
 8000a32:	f001 fc17 	bl	8002264 <LL_mDelay>
	  handle_input();
 8000a36:	e7c6      	b.n	80009c6 <main+0x9e>
 8000a38:	58024400 	.word	0x58024400
 8000a3c:	58022800 	.word	0x58022800
 8000a40:	24000035 	.word	0x24000035
 8000a44:	24000034 	.word	0x24000034
 8000a48:	2400003b 	.word	0x2400003b

08000a4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b09c      	sub	sp, #112	@ 0x70
 8000a50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a56:	224c      	movs	r2, #76	@ 0x4c
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f001 fc2a 	bl	80022b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a60:	1d3b      	adds	r3, r7, #4
 8000a62:	2220      	movs	r2, #32
 8000a64:	2100      	movs	r1, #0
 8000a66:	4618      	mov	r0, r3
 8000a68:	f001 fc24 	bl	80022b4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a6c:	2004      	movs	r0, #4
 8000a6e:	f000 facd 	bl	800100c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a72:	2300      	movs	r3, #0
 8000a74:	603b      	str	r3, [r7, #0]
 8000a76:	4b30      	ldr	r3, [pc, #192]	@ (8000b38 <SystemClock_Config+0xec>)
 8000a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a7a:	4a2f      	ldr	r2, [pc, #188]	@ (8000b38 <SystemClock_Config+0xec>)
 8000a7c:	f023 0301 	bic.w	r3, r3, #1
 8000a80:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a82:	4b2d      	ldr	r3, [pc, #180]	@ (8000b38 <SystemClock_Config+0xec>)
 8000a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	4b2b      	ldr	r3, [pc, #172]	@ (8000b3c <SystemClock_Config+0xf0>)
 8000a8e:	699b      	ldr	r3, [r3, #24]
 8000a90:	4a2a      	ldr	r2, [pc, #168]	@ (8000b3c <SystemClock_Config+0xf0>)
 8000a92:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a96:	6193      	str	r3, [r2, #24]
 8000a98:	4b28      	ldr	r3, [pc, #160]	@ (8000b3c <SystemClock_Config+0xf0>)
 8000a9a:	699b      	ldr	r3, [r3, #24]
 8000a9c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000aa0:	603b      	str	r3, [r7, #0]
 8000aa2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000aa4:	bf00      	nop
 8000aa6:	4b25      	ldr	r3, [pc, #148]	@ (8000b3c <SystemClock_Config+0xf0>)
 8000aa8:	699b      	ldr	r3, [r3, #24]
 8000aaa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000aae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000ab2:	d1f8      	bne.n	8000aa6 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ab8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000abc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000ac6:	2305      	movs	r3, #5
 8000ac8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000aca:	2340      	movs	r3, #64	@ 0x40
 8000acc:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000ad2:	2305      	movs	r3, #5
 8000ad4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000ada:	2308      	movs	r3, #8
 8000adc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aea:	4618      	mov	r0, r3
 8000aec:	f000 fae8 	bl	80010c0 <HAL_RCC_OscConfig>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000af6:	f000 f85f 	bl	8000bb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000afa:	233f      	movs	r3, #63	@ 0x3f
 8000afc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000afe:	2303      	movs	r3, #3
 8000b00:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b02:	2300      	movs	r3, #0
 8000b04:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b06:	2300      	movs	r3, #0
 8000b08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b0a:	2340      	movs	r3, #64	@ 0x40
 8000b0c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b0e:	2340      	movs	r3, #64	@ 0x40
 8000b10:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b16:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b18:	2340      	movs	r3, #64	@ 0x40
 8000b1a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	2102      	movs	r1, #2
 8000b20:	4618      	mov	r0, r3
 8000b22:	f000 ff27 	bl	8001974 <HAL_RCC_ClockConfig>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000b2c:	f000 f844 	bl	8000bb8 <Error_Handler>
  }
}
 8000b30:	bf00      	nop
 8000b32:	3770      	adds	r7, #112	@ 0x70
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	58000400 	.word	0x58000400
 8000b3c:	58024800 	.word	0x58024800

08000b40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b46:	463b      	mov	r3, r7
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
 8000b54:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOK);
 8000b56:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000b5a:	f7ff fc9f 	bl	800049c <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOI);
 8000b5e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000b62:	f7ff fc9b 	bl	800049c <LL_AHB4_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOI, a0_Pin|a1_Pin|a2_Pin|a3_Pin);
 8000b66:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000b6a:	4811      	ldr	r0, [pc, #68]	@ (8000bb0 <MX_GPIO_Init+0x70>)
 8000b6c:	f7ff fc6d 	bl	800044a <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = JRIGHT_Pin|JLEFT_Pin|JUP_Pin|JDOWN_Pin
 8000b70:	237c      	movs	r3, #124	@ 0x7c
 8000b72:	603b      	str	r3, [r7, #0]
                          |JSEL_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000b74:	2300      	movs	r3, #0
 8000b76:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000b7c:	463b      	mov	r3, r7
 8000b7e:	4619      	mov	r1, r3
 8000b80:	480c      	ldr	r0, [pc, #48]	@ (8000bb4 <MX_GPIO_Init+0x74>)
 8000b82:	f001 fb01 	bl	8002188 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = a0_Pin|a1_Pin|a2_Pin|a3_Pin;
 8000b86:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000b8a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b90:	2300      	movs	r3, #0
 8000b92:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b9c:	463b      	mov	r3, r7
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4803      	ldr	r0, [pc, #12]	@ (8000bb0 <MX_GPIO_Init+0x70>)
 8000ba2:	f001 faf1 	bl	8002188 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ba6:	bf00      	nop
 8000ba8:	3718      	adds	r7, #24
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	58022000 	.word	0x58022000
 8000bb4:	58022800 	.word	0x58022800

08000bb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bbc:	b672      	cpsid	i
}
 8000bbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bc0:	bf00      	nop
 8000bc2:	e7fd      	b.n	8000bc0 <Error_Handler+0x8>

08000bc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bca:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf4 <HAL_MspInit+0x30>)
 8000bcc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000bd0:	4a08      	ldr	r2, [pc, #32]	@ (8000bf4 <HAL_MspInit+0x30>)
 8000bd2:	f043 0302 	orr.w	r3, r3, #2
 8000bd6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000bda:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <HAL_MspInit+0x30>)
 8000bdc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000be0:	f003 0302 	and.w	r3, r3, #2
 8000be4:	607b      	str	r3, [r7, #4]
 8000be6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be8:	bf00      	nop
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	58024400 	.word	0x58024400

08000bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <NMI_Handler+0x4>

08000c00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <HardFault_Handler+0x4>

08000c08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <MemManage_Handler+0x4>

08000c10 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c14:	bf00      	nop
 8000c16:	e7fd      	b.n	8000c14 <BusFault_Handler+0x4>

08000c18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c1c:	bf00      	nop
 8000c1e:	e7fd      	b.n	8000c1c <UsageFault_Handler+0x4>

08000c20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c4e:	f000 f89f 	bl	8000d90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
	...

08000c58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000c58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c90 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c5c:	f7ff fb3c 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c60:	480c      	ldr	r0, [pc, #48]	@ (8000c94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c62:	490d      	ldr	r1, [pc, #52]	@ (8000c98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c64:	4a0d      	ldr	r2, [pc, #52]	@ (8000c9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c68:	e002      	b.n	8000c70 <LoopCopyDataInit>

08000c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6e:	3304      	adds	r3, #4

08000c70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c74:	d3f9      	bcc.n	8000c6a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c76:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c78:	4c0a      	ldr	r4, [pc, #40]	@ (8000ca4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c7c:	e001      	b.n	8000c82 <LoopFillZerobss>

08000c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c80:	3204      	adds	r2, #4

08000c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c84:	d3fb      	bcc.n	8000c7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c86:	f001 fb1d 	bl	80022c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c8a:	f7ff fe4d 	bl	8000928 <main>
  bx  lr
 8000c8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c90:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000c94:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000c98:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000c9c:	0800234c 	.word	0x0800234c
  ldr r2, =_sbss
 8000ca0:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000ca4:	24000040 	.word	0x24000040

08000ca8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ca8:	e7fe      	b.n	8000ca8 <ADC3_IRQHandler>
	...

08000cac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb2:	2003      	movs	r0, #3
 8000cb4:	f000 f94a 	bl	8000f4c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000cb8:	f001 f812 	bl	8001ce0 <HAL_RCC_GetSysClockFreq>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	4b15      	ldr	r3, [pc, #84]	@ (8000d14 <HAL_Init+0x68>)
 8000cc0:	699b      	ldr	r3, [r3, #24]
 8000cc2:	0a1b      	lsrs	r3, r3, #8
 8000cc4:	f003 030f 	and.w	r3, r3, #15
 8000cc8:	4913      	ldr	r1, [pc, #76]	@ (8000d18 <HAL_Init+0x6c>)
 8000cca:	5ccb      	ldrb	r3, [r1, r3]
 8000ccc:	f003 031f 	and.w	r3, r3, #31
 8000cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8000cd4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000cd6:	4b0f      	ldr	r3, [pc, #60]	@ (8000d14 <HAL_Init+0x68>)
 8000cd8:	699b      	ldr	r3, [r3, #24]
 8000cda:	f003 030f 	and.w	r3, r3, #15
 8000cde:	4a0e      	ldr	r2, [pc, #56]	@ (8000d18 <HAL_Init+0x6c>)
 8000ce0:	5cd3      	ldrb	r3, [r2, r3]
 8000ce2:	f003 031f 	and.w	r3, r3, #31
 8000ce6:	687a      	ldr	r2, [r7, #4]
 8000ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8000cec:	4a0b      	ldr	r2, [pc, #44]	@ (8000d1c <HAL_Init+0x70>)
 8000cee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000cf0:	4a0b      	ldr	r2, [pc, #44]	@ (8000d20 <HAL_Init+0x74>)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	f000 f814 	bl	8000d24 <HAL_InitTick>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e002      	b.n	8000d0c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000d06:	f7ff ff5d 	bl	8000bc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d0a:	2300      	movs	r3, #0
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	58024400 	.word	0x58024400
 8000d18:	08002334 	.word	0x08002334
 8000d1c:	24000004 	.word	0x24000004
 8000d20:	24000000 	.word	0x24000000

08000d24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000d2c:	4b15      	ldr	r3, [pc, #84]	@ (8000d84 <HAL_InitTick+0x60>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d101      	bne.n	8000d38 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000d34:	2301      	movs	r3, #1
 8000d36:	e021      	b.n	8000d7c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000d38:	4b13      	ldr	r3, [pc, #76]	@ (8000d88 <HAL_InitTick+0x64>)
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	4b11      	ldr	r3, [pc, #68]	@ (8000d84 <HAL_InitTick+0x60>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	4619      	mov	r1, r3
 8000d42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f000 f921 	bl	8000f96 <HAL_SYSTICK_Config>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e00e      	b.n	8000d7c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2b0f      	cmp	r3, #15
 8000d62:	d80a      	bhi.n	8000d7a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d64:	2200      	movs	r2, #0
 8000d66:	6879      	ldr	r1, [r7, #4]
 8000d68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d6c:	f000 f8f9 	bl	8000f62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d70:	4a06      	ldr	r2, [pc, #24]	@ (8000d8c <HAL_InitTick+0x68>)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d76:	2300      	movs	r3, #0
 8000d78:	e000      	b.n	8000d7c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	2400000c 	.word	0x2400000c
 8000d88:	24000000 	.word	0x24000000
 8000d8c:	24000008 	.word	0x24000008

08000d90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d94:	4b06      	ldr	r3, [pc, #24]	@ (8000db0 <HAL_IncTick+0x20>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4b06      	ldr	r3, [pc, #24]	@ (8000db4 <HAL_IncTick+0x24>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4413      	add	r3, r2
 8000da0:	4a04      	ldr	r2, [pc, #16]	@ (8000db4 <HAL_IncTick+0x24>)
 8000da2:	6013      	str	r3, [r2, #0]
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	2400000c 	.word	0x2400000c
 8000db4:	2400003c 	.word	0x2400003c

08000db8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return uwTick;
 8000dbc:	4b03      	ldr	r3, [pc, #12]	@ (8000dcc <HAL_GetTick+0x14>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	2400003c 	.word	0x2400003c

08000dd0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000dd4:	4b03      	ldr	r3, [pc, #12]	@ (8000de4 <HAL_GetREVID+0x14>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	0c1b      	lsrs	r3, r3, #16
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	5c001000 	.word	0x5c001000

08000de8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f003 0307 	and.w	r3, r3, #7
 8000df6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000df8:	4b0b      	ldr	r3, [pc, #44]	@ (8000e28 <__NVIC_SetPriorityGrouping+0x40>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dfe:	68ba      	ldr	r2, [r7, #8]
 8000e00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e04:	4013      	ands	r3, r2
 8000e06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e10:	4b06      	ldr	r3, [pc, #24]	@ (8000e2c <__NVIC_SetPriorityGrouping+0x44>)
 8000e12:	4313      	orrs	r3, r2
 8000e14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e16:	4a04      	ldr	r2, [pc, #16]	@ (8000e28 <__NVIC_SetPriorityGrouping+0x40>)
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	60d3      	str	r3, [r2, #12]
}
 8000e1c:	bf00      	nop
 8000e1e:	3714      	adds	r7, #20
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	e000ed00 	.word	0xe000ed00
 8000e2c:	05fa0000 	.word	0x05fa0000

08000e30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e34:	4b04      	ldr	r3, [pc, #16]	@ (8000e48 <__NVIC_GetPriorityGrouping+0x18>)
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	0a1b      	lsrs	r3, r3, #8
 8000e3a:	f003 0307 	and.w	r3, r3, #7
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	6039      	str	r1, [r7, #0]
 8000e56:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	db0a      	blt.n	8000e76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	b2da      	uxtb	r2, r3
 8000e64:	490c      	ldr	r1, [pc, #48]	@ (8000e98 <__NVIC_SetPriority+0x4c>)
 8000e66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e6a:	0112      	lsls	r2, r2, #4
 8000e6c:	b2d2      	uxtb	r2, r2
 8000e6e:	440b      	add	r3, r1
 8000e70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e74:	e00a      	b.n	8000e8c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	b2da      	uxtb	r2, r3
 8000e7a:	4908      	ldr	r1, [pc, #32]	@ (8000e9c <__NVIC_SetPriority+0x50>)
 8000e7c:	88fb      	ldrh	r3, [r7, #6]
 8000e7e:	f003 030f 	and.w	r3, r3, #15
 8000e82:	3b04      	subs	r3, #4
 8000e84:	0112      	lsls	r2, r2, #4
 8000e86:	b2d2      	uxtb	r2, r2
 8000e88:	440b      	add	r3, r1
 8000e8a:	761a      	strb	r2, [r3, #24]
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000e100 	.word	0xe000e100
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b089      	sub	sp, #36	@ 0x24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	f1c3 0307 	rsb	r3, r3, #7
 8000eba:	2b04      	cmp	r3, #4
 8000ebc:	bf28      	it	cs
 8000ebe:	2304      	movcs	r3, #4
 8000ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	3304      	adds	r3, #4
 8000ec6:	2b06      	cmp	r3, #6
 8000ec8:	d902      	bls.n	8000ed0 <NVIC_EncodePriority+0x30>
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	3b03      	subs	r3, #3
 8000ece:	e000      	b.n	8000ed2 <NVIC_EncodePriority+0x32>
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	43da      	mvns	r2, r3
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	401a      	ands	r2, r3
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef2:	43d9      	mvns	r1, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef8:	4313      	orrs	r3, r2
         );
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3724      	adds	r7, #36	@ 0x24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
	...

08000f08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f18:	d301      	bcc.n	8000f1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e00f      	b.n	8000f3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f48 <SysTick_Config+0x40>)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f26:	210f      	movs	r1, #15
 8000f28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f2c:	f7ff ff8e 	bl	8000e4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f30:	4b05      	ldr	r3, [pc, #20]	@ (8000f48 <SysTick_Config+0x40>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f36:	4b04      	ldr	r3, [pc, #16]	@ (8000f48 <SysTick_Config+0x40>)
 8000f38:	2207      	movs	r2, #7
 8000f3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	e000e010 	.word	0xe000e010

08000f4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f7ff ff47 	bl	8000de8 <__NVIC_SetPriorityGrouping>
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b086      	sub	sp, #24
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	4603      	mov	r3, r0
 8000f6a:	60b9      	str	r1, [r7, #8]
 8000f6c:	607a      	str	r2, [r7, #4]
 8000f6e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f70:	f7ff ff5e 	bl	8000e30 <__NVIC_GetPriorityGrouping>
 8000f74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	68b9      	ldr	r1, [r7, #8]
 8000f7a:	6978      	ldr	r0, [r7, #20]
 8000f7c:	f7ff ff90 	bl	8000ea0 <NVIC_EncodePriority>
 8000f80:	4602      	mov	r2, r0
 8000f82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f86:	4611      	mov	r1, r2
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff ff5f 	bl	8000e4c <__NVIC_SetPriority>
}
 8000f8e:	bf00      	nop
 8000f90:	3718      	adds	r7, #24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b082      	sub	sp, #8
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f7ff ffb2 	bl	8000f08 <SysTick_Config>
 8000fa4:	4603      	mov	r3, r0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
	...

08000fb0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8000fb8:	4a08      	ldr	r2, [pc, #32]	@ (8000fdc <HAL_HSEM_FastTake+0x2c>)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	3320      	adds	r3, #32
 8000fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fc2:	4a07      	ldr	r2, [pc, #28]	@ (8000fe0 <HAL_HSEM_FastTake+0x30>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d101      	bne.n	8000fcc <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	e000      	b.n	8000fce <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8000fcc:	2301      	movs	r3, #1
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	58026400 	.word	0x58026400
 8000fe0:	80000300 	.word	0x80000300

08000fe4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8000fee:	4906      	ldr	r1, [pc, #24]	@ (8001008 <HAL_HSEM_Release+0x24>)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	58026400 	.word	0x58026400

0800100c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001014:	4b29      	ldr	r3, [pc, #164]	@ (80010bc <HAL_PWREx_ConfigSupply+0xb0>)
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	f003 0307 	and.w	r3, r3, #7
 800101c:	2b06      	cmp	r3, #6
 800101e:	d00a      	beq.n	8001036 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001020:	4b26      	ldr	r3, [pc, #152]	@ (80010bc <HAL_PWREx_ConfigSupply+0xb0>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001028:	687a      	ldr	r2, [r7, #4]
 800102a:	429a      	cmp	r2, r3
 800102c:	d001      	beq.n	8001032 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e040      	b.n	80010b4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001032:	2300      	movs	r3, #0
 8001034:	e03e      	b.n	80010b4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001036:	4b21      	ldr	r3, [pc, #132]	@ (80010bc <HAL_PWREx_ConfigSupply+0xb0>)
 8001038:	68db      	ldr	r3, [r3, #12]
 800103a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800103e:	491f      	ldr	r1, [pc, #124]	@ (80010bc <HAL_PWREx_ConfigSupply+0xb0>)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4313      	orrs	r3, r2
 8001044:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001046:	f7ff feb7 	bl	8000db8 <HAL_GetTick>
 800104a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800104c:	e009      	b.n	8001062 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800104e:	f7ff feb3 	bl	8000db8 <HAL_GetTick>
 8001052:	4602      	mov	r2, r0
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800105c:	d901      	bls.n	8001062 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e028      	b.n	80010b4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001062:	4b16      	ldr	r3, [pc, #88]	@ (80010bc <HAL_PWREx_ConfigSupply+0xb0>)
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800106a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800106e:	d1ee      	bne.n	800104e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2b1e      	cmp	r3, #30
 8001074:	d008      	beq.n	8001088 <HAL_PWREx_ConfigSupply+0x7c>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2b2e      	cmp	r3, #46	@ 0x2e
 800107a:	d005      	beq.n	8001088 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2b1d      	cmp	r3, #29
 8001080:	d002      	beq.n	8001088 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2b2d      	cmp	r3, #45	@ 0x2d
 8001086:	d114      	bne.n	80010b2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001088:	f7ff fe96 	bl	8000db8 <HAL_GetTick>
 800108c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800108e:	e009      	b.n	80010a4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001090:	f7ff fe92 	bl	8000db8 <HAL_GetTick>
 8001094:	4602      	mov	r2, r0
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800109e:	d901      	bls.n	80010a4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e007      	b.n	80010b4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80010a4:	4b05      	ldr	r3, [pc, #20]	@ (80010bc <HAL_PWREx_ConfigSupply+0xb0>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010b0:	d1ee      	bne.n	8001090 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80010b2:	2300      	movs	r3, #0
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	58024800 	.word	0x58024800

080010c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08c      	sub	sp, #48	@ 0x30
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d102      	bne.n	80010d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	f000 bc48 	b.w	8001964 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f003 0301 	and.w	r3, r3, #1
 80010dc:	2b00      	cmp	r3, #0
 80010de:	f000 8088 	beq.w	80011f2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010e2:	4b99      	ldr	r3, [pc, #612]	@ (8001348 <HAL_RCC_OscConfig+0x288>)
 80010e4:	691b      	ldr	r3, [r3, #16]
 80010e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80010ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80010ec:	4b96      	ldr	r3, [pc, #600]	@ (8001348 <HAL_RCC_OscConfig+0x288>)
 80010ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80010f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010f4:	2b10      	cmp	r3, #16
 80010f6:	d007      	beq.n	8001108 <HAL_RCC_OscConfig+0x48>
 80010f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010fa:	2b18      	cmp	r3, #24
 80010fc:	d111      	bne.n	8001122 <HAL_RCC_OscConfig+0x62>
 80010fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001100:	f003 0303 	and.w	r3, r3, #3
 8001104:	2b02      	cmp	r3, #2
 8001106:	d10c      	bne.n	8001122 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001108:	4b8f      	ldr	r3, [pc, #572]	@ (8001348 <HAL_RCC_OscConfig+0x288>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d06d      	beq.n	80011f0 <HAL_RCC_OscConfig+0x130>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d169      	bne.n	80011f0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	f000 bc21 	b.w	8001964 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800112a:	d106      	bne.n	800113a <HAL_RCC_OscConfig+0x7a>
 800112c:	4b86      	ldr	r3, [pc, #536]	@ (8001348 <HAL_RCC_OscConfig+0x288>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a85      	ldr	r2, [pc, #532]	@ (8001348 <HAL_RCC_OscConfig+0x288>)
 8001132:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001136:	6013      	str	r3, [r2, #0]
 8001138:	e02e      	b.n	8001198 <HAL_RCC_OscConfig+0xd8>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d10c      	bne.n	800115c <HAL_RCC_OscConfig+0x9c>
 8001142:	4b81      	ldr	r3, [pc, #516]	@ (8001348 <HAL_RCC_OscConfig+0x288>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a80      	ldr	r2, [pc, #512]	@ (8001348 <HAL_RCC_OscConfig+0x288>)
 8001148:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800114c:	6013      	str	r3, [r2, #0]
 800114e:	4b7e      	ldr	r3, [pc, #504]	@ (8001348 <HAL_RCC_OscConfig+0x288>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a7d      	ldr	r2, [pc, #500]	@ (8001348 <HAL_RCC_OscConfig+0x288>)
 8001154:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001158:	6013      	str	r3, [r2, #0]
 800115a:	e01d      	b.n	8001198 <HAL_RCC_OscConfig+0xd8>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001164:	d10c      	bne.n	8001180 <HAL_RCC_OscConfig+0xc0>
 8001166:	4b78      	ldr	r3, [pc, #480]	@ (8001348 <HAL_RCC_OscConfig+0x288>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a77      	ldr	r2, [pc, #476]	@ (8001348 <HAL_RCC_OscConfig+0x288>)
 800116c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001170:	6013      	str	r3, [r2, #0]
 8001172:	4b75      	ldr	r3, [pc, #468]	@ (8001348 <HAL_RCC_OscConfig+0x288>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a74      	ldr	r2, [pc, #464]	@ (8001348 <HAL_RCC_OscConfig+0x288>)
 8001178:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800117c:	6013      	str	r3, [r2, #0]
 800117e:	e00b      	b.n	8001198 <HAL_RCC_OscConfig+0xd8>
 8001180:	4b71      	ldr	r3, [pc, #452]	@ (8001348 <HAL_RCC_OscConfig+0x288>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a70      	ldr	r2, [pc, #448]	@ (8001348 <HAL_RCC_OscConfig+0x288>)
 8001186:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800118a:	6013      	str	r3, [r2, #0]
 800118c:	4b6e      	ldr	r3, [pc, #440]	@ (8001348 <HAL_RCC_OscConfig+0x288>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a6d      	ldr	r2, [pc, #436]	@ (8001348 <HAL_RCC_OscConfig+0x288>)
 8001192:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001196:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d013      	beq.n	80011c8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011a0:	f7ff fe0a 	bl	8000db8 <HAL_GetTick>
 80011a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011a6:	e008      	b.n	80011ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011a8:	f7ff fe06 	bl	8000db8 <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	2b64      	cmp	r3, #100	@ 0x64
 80011b4:	d901      	bls.n	80011ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011b6:	2303      	movs	r3, #3
 80011b8:	e3d4      	b.n	8001964 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011ba:	4b63      	ldr	r3, [pc, #396]	@ (8001348 <HAL_RCC_OscConfig+0x288>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d0f0      	beq.n	80011a8 <HAL_RCC_OscConfig+0xe8>
 80011c6:	e014      	b.n	80011f2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011c8:	f7ff fdf6 	bl	8000db8 <HAL_GetTick>
 80011cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80011ce:	e008      	b.n	80011e2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011d0:	f7ff fdf2 	bl	8000db8 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b64      	cmp	r3, #100	@ 0x64
 80011dc:	d901      	bls.n	80011e2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e3c0      	b.n	8001964 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80011e2:	4b59      	ldr	r3, [pc, #356]	@ (8001348 <HAL_RCC_OscConfig+0x288>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d1f0      	bne.n	80011d0 <HAL_RCC_OscConfig+0x110>
 80011ee:	e000      	b.n	80011f2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	f000 80ca 	beq.w	8001394 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001200:	4b51      	ldr	r3, [pc, #324]	@ (8001348 <HAL_RCC_OscConfig+0x288>)
 8001202:	691b      	ldr	r3, [r3, #16]
 8001204:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001208:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800120a:	4b4f      	ldr	r3, [pc, #316]	@ (8001348 <HAL_RCC_OscConfig+0x288>)
 800120c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800120e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001210:	6a3b      	ldr	r3, [r7, #32]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d007      	beq.n	8001226 <HAL_RCC_OscConfig+0x166>
 8001216:	6a3b      	ldr	r3, [r7, #32]
 8001218:	2b18      	cmp	r3, #24
 800121a:	d156      	bne.n	80012ca <HAL_RCC_OscConfig+0x20a>
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	f003 0303 	and.w	r3, r3, #3
 8001222:	2b00      	cmp	r3, #0
 8001224:	d151      	bne.n	80012ca <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001226:	4b48      	ldr	r3, [pc, #288]	@ (8001348 <HAL_RCC_OscConfig+0x288>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 0304 	and.w	r3, r3, #4
 800122e:	2b00      	cmp	r3, #0
 8001230:	d005      	beq.n	800123e <HAL_RCC_OscConfig+0x17e>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d101      	bne.n	800123e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e392      	b.n	8001964 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800123e:	4b42      	ldr	r3, [pc, #264]	@ (8001348 <HAL_RCC_OscConfig+0x288>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f023 0219 	bic.w	r2, r3, #25
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	493f      	ldr	r1, [pc, #252]	@ (8001348 <HAL_RCC_OscConfig+0x288>)
 800124c:	4313      	orrs	r3, r2
 800124e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001250:	f7ff fdb2 	bl	8000db8 <HAL_GetTick>
 8001254:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001256:	e008      	b.n	800126a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001258:	f7ff fdae 	bl	8000db8 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b02      	cmp	r3, #2
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e37c      	b.n	8001964 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800126a:	4b37      	ldr	r3, [pc, #220]	@ (8001348 <HAL_RCC_OscConfig+0x288>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0304 	and.w	r3, r3, #4
 8001272:	2b00      	cmp	r3, #0
 8001274:	d0f0      	beq.n	8001258 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001276:	f7ff fdab 	bl	8000dd0 <HAL_GetREVID>
 800127a:	4603      	mov	r3, r0
 800127c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001280:	4293      	cmp	r3, r2
 8001282:	d817      	bhi.n	80012b4 <HAL_RCC_OscConfig+0x1f4>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	691b      	ldr	r3, [r3, #16]
 8001288:	2b40      	cmp	r3, #64	@ 0x40
 800128a:	d108      	bne.n	800129e <HAL_RCC_OscConfig+0x1de>
 800128c:	4b2e      	ldr	r3, [pc, #184]	@ (8001348 <HAL_RCC_OscConfig+0x288>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001294:	4a2c      	ldr	r2, [pc, #176]	@ (8001348 <HAL_RCC_OscConfig+0x288>)
 8001296:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800129a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800129c:	e07a      	b.n	8001394 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800129e:	4b2a      	ldr	r3, [pc, #168]	@ (8001348 <HAL_RCC_OscConfig+0x288>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	691b      	ldr	r3, [r3, #16]
 80012aa:	031b      	lsls	r3, r3, #12
 80012ac:	4926      	ldr	r1, [pc, #152]	@ (8001348 <HAL_RCC_OscConfig+0x288>)
 80012ae:	4313      	orrs	r3, r2
 80012b0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012b2:	e06f      	b.n	8001394 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012b4:	4b24      	ldr	r3, [pc, #144]	@ (8001348 <HAL_RCC_OscConfig+0x288>)
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	691b      	ldr	r3, [r3, #16]
 80012c0:	061b      	lsls	r3, r3, #24
 80012c2:	4921      	ldr	r1, [pc, #132]	@ (8001348 <HAL_RCC_OscConfig+0x288>)
 80012c4:	4313      	orrs	r3, r2
 80012c6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012c8:	e064      	b.n	8001394 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	68db      	ldr	r3, [r3, #12]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d047      	beq.n	8001362 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80012d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001348 <HAL_RCC_OscConfig+0x288>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f023 0219 	bic.w	r2, r3, #25
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	68db      	ldr	r3, [r3, #12]
 80012de:	491a      	ldr	r1, [pc, #104]	@ (8001348 <HAL_RCC_OscConfig+0x288>)
 80012e0:	4313      	orrs	r3, r2
 80012e2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e4:	f7ff fd68 	bl	8000db8 <HAL_GetTick>
 80012e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012ea:	e008      	b.n	80012fe <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012ec:	f7ff fd64 	bl	8000db8 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e332      	b.n	8001964 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012fe:	4b12      	ldr	r3, [pc, #72]	@ (8001348 <HAL_RCC_OscConfig+0x288>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0304 	and.w	r3, r3, #4
 8001306:	2b00      	cmp	r3, #0
 8001308:	d0f0      	beq.n	80012ec <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800130a:	f7ff fd61 	bl	8000dd0 <HAL_GetREVID>
 800130e:	4603      	mov	r3, r0
 8001310:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001314:	4293      	cmp	r3, r2
 8001316:	d819      	bhi.n	800134c <HAL_RCC_OscConfig+0x28c>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	691b      	ldr	r3, [r3, #16]
 800131c:	2b40      	cmp	r3, #64	@ 0x40
 800131e:	d108      	bne.n	8001332 <HAL_RCC_OscConfig+0x272>
 8001320:	4b09      	ldr	r3, [pc, #36]	@ (8001348 <HAL_RCC_OscConfig+0x288>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001328:	4a07      	ldr	r2, [pc, #28]	@ (8001348 <HAL_RCC_OscConfig+0x288>)
 800132a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800132e:	6053      	str	r3, [r2, #4]
 8001330:	e030      	b.n	8001394 <HAL_RCC_OscConfig+0x2d4>
 8001332:	4b05      	ldr	r3, [pc, #20]	@ (8001348 <HAL_RCC_OscConfig+0x288>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	691b      	ldr	r3, [r3, #16]
 800133e:	031b      	lsls	r3, r3, #12
 8001340:	4901      	ldr	r1, [pc, #4]	@ (8001348 <HAL_RCC_OscConfig+0x288>)
 8001342:	4313      	orrs	r3, r2
 8001344:	604b      	str	r3, [r1, #4]
 8001346:	e025      	b.n	8001394 <HAL_RCC_OscConfig+0x2d4>
 8001348:	58024400 	.word	0x58024400
 800134c:	4b9a      	ldr	r3, [pc, #616]	@ (80015b8 <HAL_RCC_OscConfig+0x4f8>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	691b      	ldr	r3, [r3, #16]
 8001358:	061b      	lsls	r3, r3, #24
 800135a:	4997      	ldr	r1, [pc, #604]	@ (80015b8 <HAL_RCC_OscConfig+0x4f8>)
 800135c:	4313      	orrs	r3, r2
 800135e:	604b      	str	r3, [r1, #4]
 8001360:	e018      	b.n	8001394 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001362:	4b95      	ldr	r3, [pc, #596]	@ (80015b8 <HAL_RCC_OscConfig+0x4f8>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a94      	ldr	r2, [pc, #592]	@ (80015b8 <HAL_RCC_OscConfig+0x4f8>)
 8001368:	f023 0301 	bic.w	r3, r3, #1
 800136c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800136e:	f7ff fd23 	bl	8000db8 <HAL_GetTick>
 8001372:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001374:	e008      	b.n	8001388 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001376:	f7ff fd1f 	bl	8000db8 <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d901      	bls.n	8001388 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e2ed      	b.n	8001964 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001388:	4b8b      	ldr	r3, [pc, #556]	@ (80015b8 <HAL_RCC_OscConfig+0x4f8>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 0304 	and.w	r3, r3, #4
 8001390:	2b00      	cmp	r3, #0
 8001392:	d1f0      	bne.n	8001376 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 0310 	and.w	r3, r3, #16
 800139c:	2b00      	cmp	r3, #0
 800139e:	f000 80a9 	beq.w	80014f4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013a2:	4b85      	ldr	r3, [pc, #532]	@ (80015b8 <HAL_RCC_OscConfig+0x4f8>)
 80013a4:	691b      	ldr	r3, [r3, #16]
 80013a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80013aa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80013ac:	4b82      	ldr	r3, [pc, #520]	@ (80015b8 <HAL_RCC_OscConfig+0x4f8>)
 80013ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013b0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	2b08      	cmp	r3, #8
 80013b6:	d007      	beq.n	80013c8 <HAL_RCC_OscConfig+0x308>
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	2b18      	cmp	r3, #24
 80013bc:	d13a      	bne.n	8001434 <HAL_RCC_OscConfig+0x374>
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	f003 0303 	and.w	r3, r3, #3
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d135      	bne.n	8001434 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80013c8:	4b7b      	ldr	r3, [pc, #492]	@ (80015b8 <HAL_RCC_OscConfig+0x4f8>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d005      	beq.n	80013e0 <HAL_RCC_OscConfig+0x320>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	69db      	ldr	r3, [r3, #28]
 80013d8:	2b80      	cmp	r3, #128	@ 0x80
 80013da:	d001      	beq.n	80013e0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e2c1      	b.n	8001964 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80013e0:	f7ff fcf6 	bl	8000dd0 <HAL_GetREVID>
 80013e4:	4603      	mov	r3, r0
 80013e6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d817      	bhi.n	800141e <HAL_RCC_OscConfig+0x35e>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6a1b      	ldr	r3, [r3, #32]
 80013f2:	2b20      	cmp	r3, #32
 80013f4:	d108      	bne.n	8001408 <HAL_RCC_OscConfig+0x348>
 80013f6:	4b70      	ldr	r3, [pc, #448]	@ (80015b8 <HAL_RCC_OscConfig+0x4f8>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80013fe:	4a6e      	ldr	r2, [pc, #440]	@ (80015b8 <HAL_RCC_OscConfig+0x4f8>)
 8001400:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001404:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001406:	e075      	b.n	80014f4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001408:	4b6b      	ldr	r3, [pc, #428]	@ (80015b8 <HAL_RCC_OscConfig+0x4f8>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6a1b      	ldr	r3, [r3, #32]
 8001414:	069b      	lsls	r3, r3, #26
 8001416:	4968      	ldr	r1, [pc, #416]	@ (80015b8 <HAL_RCC_OscConfig+0x4f8>)
 8001418:	4313      	orrs	r3, r2
 800141a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800141c:	e06a      	b.n	80014f4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800141e:	4b66      	ldr	r3, [pc, #408]	@ (80015b8 <HAL_RCC_OscConfig+0x4f8>)
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a1b      	ldr	r3, [r3, #32]
 800142a:	061b      	lsls	r3, r3, #24
 800142c:	4962      	ldr	r1, [pc, #392]	@ (80015b8 <HAL_RCC_OscConfig+0x4f8>)
 800142e:	4313      	orrs	r3, r2
 8001430:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001432:	e05f      	b.n	80014f4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	69db      	ldr	r3, [r3, #28]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d042      	beq.n	80014c2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800143c:	4b5e      	ldr	r3, [pc, #376]	@ (80015b8 <HAL_RCC_OscConfig+0x4f8>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a5d      	ldr	r2, [pc, #372]	@ (80015b8 <HAL_RCC_OscConfig+0x4f8>)
 8001442:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001446:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001448:	f7ff fcb6 	bl	8000db8 <HAL_GetTick>
 800144c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001450:	f7ff fcb2 	bl	8000db8 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e280      	b.n	8001964 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001462:	4b55      	ldr	r3, [pc, #340]	@ (80015b8 <HAL_RCC_OscConfig+0x4f8>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800146a:	2b00      	cmp	r3, #0
 800146c:	d0f0      	beq.n	8001450 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800146e:	f7ff fcaf 	bl	8000dd0 <HAL_GetREVID>
 8001472:	4603      	mov	r3, r0
 8001474:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001478:	4293      	cmp	r3, r2
 800147a:	d817      	bhi.n	80014ac <HAL_RCC_OscConfig+0x3ec>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6a1b      	ldr	r3, [r3, #32]
 8001480:	2b20      	cmp	r3, #32
 8001482:	d108      	bne.n	8001496 <HAL_RCC_OscConfig+0x3d6>
 8001484:	4b4c      	ldr	r3, [pc, #304]	@ (80015b8 <HAL_RCC_OscConfig+0x4f8>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800148c:	4a4a      	ldr	r2, [pc, #296]	@ (80015b8 <HAL_RCC_OscConfig+0x4f8>)
 800148e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001492:	6053      	str	r3, [r2, #4]
 8001494:	e02e      	b.n	80014f4 <HAL_RCC_OscConfig+0x434>
 8001496:	4b48      	ldr	r3, [pc, #288]	@ (80015b8 <HAL_RCC_OscConfig+0x4f8>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6a1b      	ldr	r3, [r3, #32]
 80014a2:	069b      	lsls	r3, r3, #26
 80014a4:	4944      	ldr	r1, [pc, #272]	@ (80015b8 <HAL_RCC_OscConfig+0x4f8>)
 80014a6:	4313      	orrs	r3, r2
 80014a8:	604b      	str	r3, [r1, #4]
 80014aa:	e023      	b.n	80014f4 <HAL_RCC_OscConfig+0x434>
 80014ac:	4b42      	ldr	r3, [pc, #264]	@ (80015b8 <HAL_RCC_OscConfig+0x4f8>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6a1b      	ldr	r3, [r3, #32]
 80014b8:	061b      	lsls	r3, r3, #24
 80014ba:	493f      	ldr	r1, [pc, #252]	@ (80015b8 <HAL_RCC_OscConfig+0x4f8>)
 80014bc:	4313      	orrs	r3, r2
 80014be:	60cb      	str	r3, [r1, #12]
 80014c0:	e018      	b.n	80014f4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80014c2:	4b3d      	ldr	r3, [pc, #244]	@ (80015b8 <HAL_RCC_OscConfig+0x4f8>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a3c      	ldr	r2, [pc, #240]	@ (80015b8 <HAL_RCC_OscConfig+0x4f8>)
 80014c8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80014cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ce:	f7ff fc73 	bl	8000db8 <HAL_GetTick>
 80014d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80014d4:	e008      	b.n	80014e8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80014d6:	f7ff fc6f 	bl	8000db8 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e23d      	b.n	8001964 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80014e8:	4b33      	ldr	r3, [pc, #204]	@ (80015b8 <HAL_RCC_OscConfig+0x4f8>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d1f0      	bne.n	80014d6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0308 	and.w	r3, r3, #8
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d036      	beq.n	800156e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	695b      	ldr	r3, [r3, #20]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d019      	beq.n	800153c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001508:	4b2b      	ldr	r3, [pc, #172]	@ (80015b8 <HAL_RCC_OscConfig+0x4f8>)
 800150a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800150c:	4a2a      	ldr	r2, [pc, #168]	@ (80015b8 <HAL_RCC_OscConfig+0x4f8>)
 800150e:	f043 0301 	orr.w	r3, r3, #1
 8001512:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001514:	f7ff fc50 	bl	8000db8 <HAL_GetTick>
 8001518:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800151c:	f7ff fc4c 	bl	8000db8 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b02      	cmp	r3, #2
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e21a      	b.n	8001964 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800152e:	4b22      	ldr	r3, [pc, #136]	@ (80015b8 <HAL_RCC_OscConfig+0x4f8>)
 8001530:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d0f0      	beq.n	800151c <HAL_RCC_OscConfig+0x45c>
 800153a:	e018      	b.n	800156e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800153c:	4b1e      	ldr	r3, [pc, #120]	@ (80015b8 <HAL_RCC_OscConfig+0x4f8>)
 800153e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001540:	4a1d      	ldr	r2, [pc, #116]	@ (80015b8 <HAL_RCC_OscConfig+0x4f8>)
 8001542:	f023 0301 	bic.w	r3, r3, #1
 8001546:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001548:	f7ff fc36 	bl	8000db8 <HAL_GetTick>
 800154c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800154e:	e008      	b.n	8001562 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001550:	f7ff fc32 	bl	8000db8 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b02      	cmp	r3, #2
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e200      	b.n	8001964 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001562:	4b15      	ldr	r3, [pc, #84]	@ (80015b8 <HAL_RCC_OscConfig+0x4f8>)
 8001564:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d1f0      	bne.n	8001550 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0320 	and.w	r3, r3, #32
 8001576:	2b00      	cmp	r3, #0
 8001578:	d039      	beq.n	80015ee <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d01c      	beq.n	80015bc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001582:	4b0d      	ldr	r3, [pc, #52]	@ (80015b8 <HAL_RCC_OscConfig+0x4f8>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a0c      	ldr	r2, [pc, #48]	@ (80015b8 <HAL_RCC_OscConfig+0x4f8>)
 8001588:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800158c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800158e:	f7ff fc13 	bl	8000db8 <HAL_GetTick>
 8001592:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001594:	e008      	b.n	80015a8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001596:	f7ff fc0f 	bl	8000db8 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e1dd      	b.n	8001964 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80015a8:	4b03      	ldr	r3, [pc, #12]	@ (80015b8 <HAL_RCC_OscConfig+0x4f8>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d0f0      	beq.n	8001596 <HAL_RCC_OscConfig+0x4d6>
 80015b4:	e01b      	b.n	80015ee <HAL_RCC_OscConfig+0x52e>
 80015b6:	bf00      	nop
 80015b8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80015bc:	4b9b      	ldr	r3, [pc, #620]	@ (800182c <HAL_RCC_OscConfig+0x76c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a9a      	ldr	r2, [pc, #616]	@ (800182c <HAL_RCC_OscConfig+0x76c>)
 80015c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80015c6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80015c8:	f7ff fbf6 	bl	8000db8 <HAL_GetTick>
 80015cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015d0:	f7ff fbf2 	bl	8000db8 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e1c0      	b.n	8001964 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80015e2:	4b92      	ldr	r3, [pc, #584]	@ (800182c <HAL_RCC_OscConfig+0x76c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d1f0      	bne.n	80015d0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0304 	and.w	r3, r3, #4
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f000 8081 	beq.w	80016fe <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80015fc:	4b8c      	ldr	r3, [pc, #560]	@ (8001830 <HAL_RCC_OscConfig+0x770>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a8b      	ldr	r2, [pc, #556]	@ (8001830 <HAL_RCC_OscConfig+0x770>)
 8001602:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001606:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001608:	f7ff fbd6 	bl	8000db8 <HAL_GetTick>
 800160c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001610:	f7ff fbd2 	bl	8000db8 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b64      	cmp	r3, #100	@ 0x64
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e1a0      	b.n	8001964 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001622:	4b83      	ldr	r3, [pc, #524]	@ (8001830 <HAL_RCC_OscConfig+0x770>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800162a:	2b00      	cmp	r3, #0
 800162c:	d0f0      	beq.n	8001610 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d106      	bne.n	8001644 <HAL_RCC_OscConfig+0x584>
 8001636:	4b7d      	ldr	r3, [pc, #500]	@ (800182c <HAL_RCC_OscConfig+0x76c>)
 8001638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800163a:	4a7c      	ldr	r2, [pc, #496]	@ (800182c <HAL_RCC_OscConfig+0x76c>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	6713      	str	r3, [r2, #112]	@ 0x70
 8001642:	e02d      	b.n	80016a0 <HAL_RCC_OscConfig+0x5e0>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d10c      	bne.n	8001666 <HAL_RCC_OscConfig+0x5a6>
 800164c:	4b77      	ldr	r3, [pc, #476]	@ (800182c <HAL_RCC_OscConfig+0x76c>)
 800164e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001650:	4a76      	ldr	r2, [pc, #472]	@ (800182c <HAL_RCC_OscConfig+0x76c>)
 8001652:	f023 0301 	bic.w	r3, r3, #1
 8001656:	6713      	str	r3, [r2, #112]	@ 0x70
 8001658:	4b74      	ldr	r3, [pc, #464]	@ (800182c <HAL_RCC_OscConfig+0x76c>)
 800165a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800165c:	4a73      	ldr	r2, [pc, #460]	@ (800182c <HAL_RCC_OscConfig+0x76c>)
 800165e:	f023 0304 	bic.w	r3, r3, #4
 8001662:	6713      	str	r3, [r2, #112]	@ 0x70
 8001664:	e01c      	b.n	80016a0 <HAL_RCC_OscConfig+0x5e0>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	2b05      	cmp	r3, #5
 800166c:	d10c      	bne.n	8001688 <HAL_RCC_OscConfig+0x5c8>
 800166e:	4b6f      	ldr	r3, [pc, #444]	@ (800182c <HAL_RCC_OscConfig+0x76c>)
 8001670:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001672:	4a6e      	ldr	r2, [pc, #440]	@ (800182c <HAL_RCC_OscConfig+0x76c>)
 8001674:	f043 0304 	orr.w	r3, r3, #4
 8001678:	6713      	str	r3, [r2, #112]	@ 0x70
 800167a:	4b6c      	ldr	r3, [pc, #432]	@ (800182c <HAL_RCC_OscConfig+0x76c>)
 800167c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800167e:	4a6b      	ldr	r2, [pc, #428]	@ (800182c <HAL_RCC_OscConfig+0x76c>)
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	6713      	str	r3, [r2, #112]	@ 0x70
 8001686:	e00b      	b.n	80016a0 <HAL_RCC_OscConfig+0x5e0>
 8001688:	4b68      	ldr	r3, [pc, #416]	@ (800182c <HAL_RCC_OscConfig+0x76c>)
 800168a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800168c:	4a67      	ldr	r2, [pc, #412]	@ (800182c <HAL_RCC_OscConfig+0x76c>)
 800168e:	f023 0301 	bic.w	r3, r3, #1
 8001692:	6713      	str	r3, [r2, #112]	@ 0x70
 8001694:	4b65      	ldr	r3, [pc, #404]	@ (800182c <HAL_RCC_OscConfig+0x76c>)
 8001696:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001698:	4a64      	ldr	r2, [pc, #400]	@ (800182c <HAL_RCC_OscConfig+0x76c>)
 800169a:	f023 0304 	bic.w	r3, r3, #4
 800169e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d015      	beq.n	80016d4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016a8:	f7ff fb86 	bl	8000db8 <HAL_GetTick>
 80016ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80016ae:	e00a      	b.n	80016c6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016b0:	f7ff fb82 	bl	8000db8 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016be:	4293      	cmp	r3, r2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e14e      	b.n	8001964 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80016c6:	4b59      	ldr	r3, [pc, #356]	@ (800182c <HAL_RCC_OscConfig+0x76c>)
 80016c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d0ee      	beq.n	80016b0 <HAL_RCC_OscConfig+0x5f0>
 80016d2:	e014      	b.n	80016fe <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d4:	f7ff fb70 	bl	8000db8 <HAL_GetTick>
 80016d8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80016da:	e00a      	b.n	80016f2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016dc:	f7ff fb6c 	bl	8000db8 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e138      	b.n	8001964 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80016f2:	4b4e      	ldr	r3, [pc, #312]	@ (800182c <HAL_RCC_OscConfig+0x76c>)
 80016f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1ee      	bne.n	80016dc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001702:	2b00      	cmp	r3, #0
 8001704:	f000 812d 	beq.w	8001962 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001708:	4b48      	ldr	r3, [pc, #288]	@ (800182c <HAL_RCC_OscConfig+0x76c>)
 800170a:	691b      	ldr	r3, [r3, #16]
 800170c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001710:	2b18      	cmp	r3, #24
 8001712:	f000 80bd 	beq.w	8001890 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800171a:	2b02      	cmp	r3, #2
 800171c:	f040 809e 	bne.w	800185c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001720:	4b42      	ldr	r3, [pc, #264]	@ (800182c <HAL_RCC_OscConfig+0x76c>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a41      	ldr	r2, [pc, #260]	@ (800182c <HAL_RCC_OscConfig+0x76c>)
 8001726:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800172a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800172c:	f7ff fb44 	bl	8000db8 <HAL_GetTick>
 8001730:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001734:	f7ff fb40 	bl	8000db8 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e10e      	b.n	8001964 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001746:	4b39      	ldr	r3, [pc, #228]	@ (800182c <HAL_RCC_OscConfig+0x76c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f0      	bne.n	8001734 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001752:	4b36      	ldr	r3, [pc, #216]	@ (800182c <HAL_RCC_OscConfig+0x76c>)
 8001754:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001756:	4b37      	ldr	r3, [pc, #220]	@ (8001834 <HAL_RCC_OscConfig+0x774>)
 8001758:	4013      	ands	r3, r2
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001762:	0112      	lsls	r2, r2, #4
 8001764:	430a      	orrs	r2, r1
 8001766:	4931      	ldr	r1, [pc, #196]	@ (800182c <HAL_RCC_OscConfig+0x76c>)
 8001768:	4313      	orrs	r3, r2
 800176a:	628b      	str	r3, [r1, #40]	@ 0x28
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001770:	3b01      	subs	r3, #1
 8001772:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800177a:	3b01      	subs	r3, #1
 800177c:	025b      	lsls	r3, r3, #9
 800177e:	b29b      	uxth	r3, r3
 8001780:	431a      	orrs	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001786:	3b01      	subs	r3, #1
 8001788:	041b      	lsls	r3, r3, #16
 800178a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800178e:	431a      	orrs	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001794:	3b01      	subs	r3, #1
 8001796:	061b      	lsls	r3, r3, #24
 8001798:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800179c:	4923      	ldr	r1, [pc, #140]	@ (800182c <HAL_RCC_OscConfig+0x76c>)
 800179e:	4313      	orrs	r3, r2
 80017a0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80017a2:	4b22      	ldr	r3, [pc, #136]	@ (800182c <HAL_RCC_OscConfig+0x76c>)
 80017a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017a6:	4a21      	ldr	r2, [pc, #132]	@ (800182c <HAL_RCC_OscConfig+0x76c>)
 80017a8:	f023 0301 	bic.w	r3, r3, #1
 80017ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80017ae:	4b1f      	ldr	r3, [pc, #124]	@ (800182c <HAL_RCC_OscConfig+0x76c>)
 80017b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80017b2:	4b21      	ldr	r3, [pc, #132]	@ (8001838 <HAL_RCC_OscConfig+0x778>)
 80017b4:	4013      	ands	r3, r2
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80017ba:	00d2      	lsls	r2, r2, #3
 80017bc:	491b      	ldr	r1, [pc, #108]	@ (800182c <HAL_RCC_OscConfig+0x76c>)
 80017be:	4313      	orrs	r3, r2
 80017c0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80017c2:	4b1a      	ldr	r3, [pc, #104]	@ (800182c <HAL_RCC_OscConfig+0x76c>)
 80017c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017c6:	f023 020c 	bic.w	r2, r3, #12
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ce:	4917      	ldr	r1, [pc, #92]	@ (800182c <HAL_RCC_OscConfig+0x76c>)
 80017d0:	4313      	orrs	r3, r2
 80017d2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80017d4:	4b15      	ldr	r3, [pc, #84]	@ (800182c <HAL_RCC_OscConfig+0x76c>)
 80017d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017d8:	f023 0202 	bic.w	r2, r3, #2
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017e0:	4912      	ldr	r1, [pc, #72]	@ (800182c <HAL_RCC_OscConfig+0x76c>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80017e6:	4b11      	ldr	r3, [pc, #68]	@ (800182c <HAL_RCC_OscConfig+0x76c>)
 80017e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ea:	4a10      	ldr	r2, [pc, #64]	@ (800182c <HAL_RCC_OscConfig+0x76c>)
 80017ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80017f2:	4b0e      	ldr	r3, [pc, #56]	@ (800182c <HAL_RCC_OscConfig+0x76c>)
 80017f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017f6:	4a0d      	ldr	r2, [pc, #52]	@ (800182c <HAL_RCC_OscConfig+0x76c>)
 80017f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80017fe:	4b0b      	ldr	r3, [pc, #44]	@ (800182c <HAL_RCC_OscConfig+0x76c>)
 8001800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001802:	4a0a      	ldr	r2, [pc, #40]	@ (800182c <HAL_RCC_OscConfig+0x76c>)
 8001804:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001808:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800180a:	4b08      	ldr	r3, [pc, #32]	@ (800182c <HAL_RCC_OscConfig+0x76c>)
 800180c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800180e:	4a07      	ldr	r2, [pc, #28]	@ (800182c <HAL_RCC_OscConfig+0x76c>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001816:	4b05      	ldr	r3, [pc, #20]	@ (800182c <HAL_RCC_OscConfig+0x76c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a04      	ldr	r2, [pc, #16]	@ (800182c <HAL_RCC_OscConfig+0x76c>)
 800181c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001820:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001822:	f7ff fac9 	bl	8000db8 <HAL_GetTick>
 8001826:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001828:	e011      	b.n	800184e <HAL_RCC_OscConfig+0x78e>
 800182a:	bf00      	nop
 800182c:	58024400 	.word	0x58024400
 8001830:	58024800 	.word	0x58024800
 8001834:	fffffc0c 	.word	0xfffffc0c
 8001838:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800183c:	f7ff fabc 	bl	8000db8 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e08a      	b.n	8001964 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800184e:	4b47      	ldr	r3, [pc, #284]	@ (800196c <HAL_RCC_OscConfig+0x8ac>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d0f0      	beq.n	800183c <HAL_RCC_OscConfig+0x77c>
 800185a:	e082      	b.n	8001962 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800185c:	4b43      	ldr	r3, [pc, #268]	@ (800196c <HAL_RCC_OscConfig+0x8ac>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a42      	ldr	r2, [pc, #264]	@ (800196c <HAL_RCC_OscConfig+0x8ac>)
 8001862:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001866:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001868:	f7ff faa6 	bl	8000db8 <HAL_GetTick>
 800186c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001870:	f7ff faa2 	bl	8000db8 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e070      	b.n	8001964 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001882:	4b3a      	ldr	r3, [pc, #232]	@ (800196c <HAL_RCC_OscConfig+0x8ac>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1f0      	bne.n	8001870 <HAL_RCC_OscConfig+0x7b0>
 800188e:	e068      	b.n	8001962 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001890:	4b36      	ldr	r3, [pc, #216]	@ (800196c <HAL_RCC_OscConfig+0x8ac>)
 8001892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001894:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001896:	4b35      	ldr	r3, [pc, #212]	@ (800196c <HAL_RCC_OscConfig+0x8ac>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d031      	beq.n	8001908 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	f003 0203 	and.w	r2, r3, #3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d12a      	bne.n	8001908 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	091b      	lsrs	r3, r3, #4
 80018b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018be:	429a      	cmp	r2, r3
 80018c0:	d122      	bne.n	8001908 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018cc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d11a      	bne.n	8001908 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	0a5b      	lsrs	r3, r3, #9
 80018d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018de:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d111      	bne.n	8001908 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	0c1b      	lsrs	r3, r3, #16
 80018e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018f0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d108      	bne.n	8001908 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	0e1b      	lsrs	r3, r3, #24
 80018fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001902:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001904:	429a      	cmp	r2, r3
 8001906:	d001      	beq.n	800190c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e02b      	b.n	8001964 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800190c:	4b17      	ldr	r3, [pc, #92]	@ (800196c <HAL_RCC_OscConfig+0x8ac>)
 800190e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001910:	08db      	lsrs	r3, r3, #3
 8001912:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001916:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	429a      	cmp	r2, r3
 8001920:	d01f      	beq.n	8001962 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001922:	4b12      	ldr	r3, [pc, #72]	@ (800196c <HAL_RCC_OscConfig+0x8ac>)
 8001924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001926:	4a11      	ldr	r2, [pc, #68]	@ (800196c <HAL_RCC_OscConfig+0x8ac>)
 8001928:	f023 0301 	bic.w	r3, r3, #1
 800192c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800192e:	f7ff fa43 	bl	8000db8 <HAL_GetTick>
 8001932:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001934:	bf00      	nop
 8001936:	f7ff fa3f 	bl	8000db8 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800193e:	4293      	cmp	r3, r2
 8001940:	d0f9      	beq.n	8001936 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001942:	4b0a      	ldr	r3, [pc, #40]	@ (800196c <HAL_RCC_OscConfig+0x8ac>)
 8001944:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001946:	4b0a      	ldr	r3, [pc, #40]	@ (8001970 <HAL_RCC_OscConfig+0x8b0>)
 8001948:	4013      	ands	r3, r2
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800194e:	00d2      	lsls	r2, r2, #3
 8001950:	4906      	ldr	r1, [pc, #24]	@ (800196c <HAL_RCC_OscConfig+0x8ac>)
 8001952:	4313      	orrs	r3, r2
 8001954:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001956:	4b05      	ldr	r3, [pc, #20]	@ (800196c <HAL_RCC_OscConfig+0x8ac>)
 8001958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800195a:	4a04      	ldr	r2, [pc, #16]	@ (800196c <HAL_RCC_OscConfig+0x8ac>)
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	3730      	adds	r7, #48	@ 0x30
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	58024400 	.word	0x58024400
 8001970:	ffff0007 	.word	0xffff0007

08001974 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d101      	bne.n	8001988 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e19c      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001988:	4b8a      	ldr	r3, [pc, #552]	@ (8001bb4 <HAL_RCC_ClockConfig+0x240>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 030f 	and.w	r3, r3, #15
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	429a      	cmp	r2, r3
 8001994:	d910      	bls.n	80019b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001996:	4b87      	ldr	r3, [pc, #540]	@ (8001bb4 <HAL_RCC_ClockConfig+0x240>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f023 020f 	bic.w	r2, r3, #15
 800199e:	4985      	ldr	r1, [pc, #532]	@ (8001bb4 <HAL_RCC_ClockConfig+0x240>)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a6:	4b83      	ldr	r3, [pc, #524]	@ (8001bb4 <HAL_RCC_ClockConfig+0x240>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 030f 	and.w	r3, r3, #15
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d001      	beq.n	80019b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e184      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0304 	and.w	r3, r3, #4
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d010      	beq.n	80019e6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	691a      	ldr	r2, [r3, #16]
 80019c8:	4b7b      	ldr	r3, [pc, #492]	@ (8001bb8 <HAL_RCC_ClockConfig+0x244>)
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d908      	bls.n	80019e6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80019d4:	4b78      	ldr	r3, [pc, #480]	@ (8001bb8 <HAL_RCC_ClockConfig+0x244>)
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	4975      	ldr	r1, [pc, #468]	@ (8001bb8 <HAL_RCC_ClockConfig+0x244>)
 80019e2:	4313      	orrs	r3, r2
 80019e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0308 	and.w	r3, r3, #8
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d010      	beq.n	8001a14 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	695a      	ldr	r2, [r3, #20]
 80019f6:	4b70      	ldr	r3, [pc, #448]	@ (8001bb8 <HAL_RCC_ClockConfig+0x244>)
 80019f8:	69db      	ldr	r3, [r3, #28]
 80019fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d908      	bls.n	8001a14 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001a02:	4b6d      	ldr	r3, [pc, #436]	@ (8001bb8 <HAL_RCC_ClockConfig+0x244>)
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	496a      	ldr	r1, [pc, #424]	@ (8001bb8 <HAL_RCC_ClockConfig+0x244>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0310 	and.w	r3, r3, #16
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d010      	beq.n	8001a42 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	699a      	ldr	r2, [r3, #24]
 8001a24:	4b64      	ldr	r3, [pc, #400]	@ (8001bb8 <HAL_RCC_ClockConfig+0x244>)
 8001a26:	69db      	ldr	r3, [r3, #28]
 8001a28:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d908      	bls.n	8001a42 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001a30:	4b61      	ldr	r3, [pc, #388]	@ (8001bb8 <HAL_RCC_ClockConfig+0x244>)
 8001a32:	69db      	ldr	r3, [r3, #28]
 8001a34:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	495e      	ldr	r1, [pc, #376]	@ (8001bb8 <HAL_RCC_ClockConfig+0x244>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0320 	and.w	r3, r3, #32
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d010      	beq.n	8001a70 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	69da      	ldr	r2, [r3, #28]
 8001a52:	4b59      	ldr	r3, [pc, #356]	@ (8001bb8 <HAL_RCC_ClockConfig+0x244>)
 8001a54:	6a1b      	ldr	r3, [r3, #32]
 8001a56:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d908      	bls.n	8001a70 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001a5e:	4b56      	ldr	r3, [pc, #344]	@ (8001bb8 <HAL_RCC_ClockConfig+0x244>)
 8001a60:	6a1b      	ldr	r3, [r3, #32]
 8001a62:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	4953      	ldr	r1, [pc, #332]	@ (8001bb8 <HAL_RCC_ClockConfig+0x244>)
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d010      	beq.n	8001a9e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68da      	ldr	r2, [r3, #12]
 8001a80:	4b4d      	ldr	r3, [pc, #308]	@ (8001bb8 <HAL_RCC_ClockConfig+0x244>)
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	f003 030f 	and.w	r3, r3, #15
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d908      	bls.n	8001a9e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a8c:	4b4a      	ldr	r3, [pc, #296]	@ (8001bb8 <HAL_RCC_ClockConfig+0x244>)
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	f023 020f 	bic.w	r2, r3, #15
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	4947      	ldr	r1, [pc, #284]	@ (8001bb8 <HAL_RCC_ClockConfig+0x244>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d055      	beq.n	8001b56 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001aaa:	4b43      	ldr	r3, [pc, #268]	@ (8001bb8 <HAL_RCC_ClockConfig+0x244>)
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	4940      	ldr	r1, [pc, #256]	@ (8001bb8 <HAL_RCC_ClockConfig+0x244>)
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d107      	bne.n	8001ad4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ac4:	4b3c      	ldr	r3, [pc, #240]	@ (8001bb8 <HAL_RCC_ClockConfig+0x244>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d121      	bne.n	8001b14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e0f6      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	2b03      	cmp	r3, #3
 8001ada:	d107      	bne.n	8001aec <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001adc:	4b36      	ldr	r3, [pc, #216]	@ (8001bb8 <HAL_RCC_ClockConfig+0x244>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d115      	bne.n	8001b14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e0ea      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d107      	bne.n	8001b04 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001af4:	4b30      	ldr	r3, [pc, #192]	@ (8001bb8 <HAL_RCC_ClockConfig+0x244>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d109      	bne.n	8001b14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e0de      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b04:	4b2c      	ldr	r3, [pc, #176]	@ (8001bb8 <HAL_RCC_ClockConfig+0x244>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0304 	and.w	r3, r3, #4
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d101      	bne.n	8001b14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e0d6      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b14:	4b28      	ldr	r3, [pc, #160]	@ (8001bb8 <HAL_RCC_ClockConfig+0x244>)
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	f023 0207 	bic.w	r2, r3, #7
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	4925      	ldr	r1, [pc, #148]	@ (8001bb8 <HAL_RCC_ClockConfig+0x244>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b26:	f7ff f947 	bl	8000db8 <HAL_GetTick>
 8001b2a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b2c:	e00a      	b.n	8001b44 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b2e:	f7ff f943 	bl	8000db8 <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e0be      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b44:	4b1c      	ldr	r3, [pc, #112]	@ (8001bb8 <HAL_RCC_ClockConfig+0x244>)
 8001b46:	691b      	ldr	r3, [r3, #16]
 8001b48:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d1eb      	bne.n	8001b2e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d010      	beq.n	8001b84 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	68da      	ldr	r2, [r3, #12]
 8001b66:	4b14      	ldr	r3, [pc, #80]	@ (8001bb8 <HAL_RCC_ClockConfig+0x244>)
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	f003 030f 	and.w	r3, r3, #15
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d208      	bcs.n	8001b84 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b72:	4b11      	ldr	r3, [pc, #68]	@ (8001bb8 <HAL_RCC_ClockConfig+0x244>)
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	f023 020f 	bic.w	r2, r3, #15
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	490e      	ldr	r1, [pc, #56]	@ (8001bb8 <HAL_RCC_ClockConfig+0x244>)
 8001b80:	4313      	orrs	r3, r2
 8001b82:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b84:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb4 <HAL_RCC_ClockConfig+0x240>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 030f 	and.w	r3, r3, #15
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d214      	bcs.n	8001bbc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b92:	4b08      	ldr	r3, [pc, #32]	@ (8001bb4 <HAL_RCC_ClockConfig+0x240>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f023 020f 	bic.w	r2, r3, #15
 8001b9a:	4906      	ldr	r1, [pc, #24]	@ (8001bb4 <HAL_RCC_ClockConfig+0x240>)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba2:	4b04      	ldr	r3, [pc, #16]	@ (8001bb4 <HAL_RCC_ClockConfig+0x240>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 030f 	and.w	r3, r3, #15
 8001baa:	683a      	ldr	r2, [r7, #0]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d005      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e086      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x34e>
 8001bb4:	52002000 	.word	0x52002000
 8001bb8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0304 	and.w	r3, r3, #4
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d010      	beq.n	8001bea <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	691a      	ldr	r2, [r3, #16]
 8001bcc:	4b3f      	ldr	r3, [pc, #252]	@ (8001ccc <HAL_RCC_ClockConfig+0x358>)
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d208      	bcs.n	8001bea <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001bd8:	4b3c      	ldr	r3, [pc, #240]	@ (8001ccc <HAL_RCC_ClockConfig+0x358>)
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	4939      	ldr	r1, [pc, #228]	@ (8001ccc <HAL_RCC_ClockConfig+0x358>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0308 	and.w	r3, r3, #8
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d010      	beq.n	8001c18 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	695a      	ldr	r2, [r3, #20]
 8001bfa:	4b34      	ldr	r3, [pc, #208]	@ (8001ccc <HAL_RCC_ClockConfig+0x358>)
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d208      	bcs.n	8001c18 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001c06:	4b31      	ldr	r3, [pc, #196]	@ (8001ccc <HAL_RCC_ClockConfig+0x358>)
 8001c08:	69db      	ldr	r3, [r3, #28]
 8001c0a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	492e      	ldr	r1, [pc, #184]	@ (8001ccc <HAL_RCC_ClockConfig+0x358>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0310 	and.w	r3, r3, #16
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d010      	beq.n	8001c46 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	699a      	ldr	r2, [r3, #24]
 8001c28:	4b28      	ldr	r3, [pc, #160]	@ (8001ccc <HAL_RCC_ClockConfig+0x358>)
 8001c2a:	69db      	ldr	r3, [r3, #28]
 8001c2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d208      	bcs.n	8001c46 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001c34:	4b25      	ldr	r3, [pc, #148]	@ (8001ccc <HAL_RCC_ClockConfig+0x358>)
 8001c36:	69db      	ldr	r3, [r3, #28]
 8001c38:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	4922      	ldr	r1, [pc, #136]	@ (8001ccc <HAL_RCC_ClockConfig+0x358>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0320 	and.w	r3, r3, #32
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d010      	beq.n	8001c74 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	69da      	ldr	r2, [r3, #28]
 8001c56:	4b1d      	ldr	r3, [pc, #116]	@ (8001ccc <HAL_RCC_ClockConfig+0x358>)
 8001c58:	6a1b      	ldr	r3, [r3, #32]
 8001c5a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d208      	bcs.n	8001c74 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001c62:	4b1a      	ldr	r3, [pc, #104]	@ (8001ccc <HAL_RCC_ClockConfig+0x358>)
 8001c64:	6a1b      	ldr	r3, [r3, #32]
 8001c66:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	4917      	ldr	r1, [pc, #92]	@ (8001ccc <HAL_RCC_ClockConfig+0x358>)
 8001c70:	4313      	orrs	r3, r2
 8001c72:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c74:	f000 f834 	bl	8001ce0 <HAL_RCC_GetSysClockFreq>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	4b14      	ldr	r3, [pc, #80]	@ (8001ccc <HAL_RCC_ClockConfig+0x358>)
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	0a1b      	lsrs	r3, r3, #8
 8001c80:	f003 030f 	and.w	r3, r3, #15
 8001c84:	4912      	ldr	r1, [pc, #72]	@ (8001cd0 <HAL_RCC_ClockConfig+0x35c>)
 8001c86:	5ccb      	ldrb	r3, [r1, r3]
 8001c88:	f003 031f 	and.w	r3, r3, #31
 8001c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c90:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c92:	4b0e      	ldr	r3, [pc, #56]	@ (8001ccc <HAL_RCC_ClockConfig+0x358>)
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	f003 030f 	and.w	r3, r3, #15
 8001c9a:	4a0d      	ldr	r2, [pc, #52]	@ (8001cd0 <HAL_RCC_ClockConfig+0x35c>)
 8001c9c:	5cd3      	ldrb	r3, [r2, r3]
 8001c9e:	f003 031f 	and.w	r3, r3, #31
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca8:	4a0a      	ldr	r2, [pc, #40]	@ (8001cd4 <HAL_RCC_ClockConfig+0x360>)
 8001caa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001cac:	4a0a      	ldr	r2, [pc, #40]	@ (8001cd8 <HAL_RCC_ClockConfig+0x364>)
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8001cdc <HAL_RCC_ClockConfig+0x368>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff f834 	bl	8000d24 <HAL_InitTick>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3718      	adds	r7, #24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	58024400 	.word	0x58024400
 8001cd0:	08002334 	.word	0x08002334
 8001cd4:	24000004 	.word	0x24000004
 8001cd8:	24000000 	.word	0x24000000
 8001cdc:	24000008 	.word	0x24000008

08001ce0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b089      	sub	sp, #36	@ 0x24
 8001ce4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ce6:	4bb3      	ldr	r3, [pc, #716]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001cee:	2b18      	cmp	r3, #24
 8001cf0:	f200 8155 	bhi.w	8001f9e <HAL_RCC_GetSysClockFreq+0x2be>
 8001cf4:	a201      	add	r2, pc, #4	@ (adr r2, 8001cfc <HAL_RCC_GetSysClockFreq+0x1c>)
 8001cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cfa:	bf00      	nop
 8001cfc:	08001d61 	.word	0x08001d61
 8001d00:	08001f9f 	.word	0x08001f9f
 8001d04:	08001f9f 	.word	0x08001f9f
 8001d08:	08001f9f 	.word	0x08001f9f
 8001d0c:	08001f9f 	.word	0x08001f9f
 8001d10:	08001f9f 	.word	0x08001f9f
 8001d14:	08001f9f 	.word	0x08001f9f
 8001d18:	08001f9f 	.word	0x08001f9f
 8001d1c:	08001d87 	.word	0x08001d87
 8001d20:	08001f9f 	.word	0x08001f9f
 8001d24:	08001f9f 	.word	0x08001f9f
 8001d28:	08001f9f 	.word	0x08001f9f
 8001d2c:	08001f9f 	.word	0x08001f9f
 8001d30:	08001f9f 	.word	0x08001f9f
 8001d34:	08001f9f 	.word	0x08001f9f
 8001d38:	08001f9f 	.word	0x08001f9f
 8001d3c:	08001d8d 	.word	0x08001d8d
 8001d40:	08001f9f 	.word	0x08001f9f
 8001d44:	08001f9f 	.word	0x08001f9f
 8001d48:	08001f9f 	.word	0x08001f9f
 8001d4c:	08001f9f 	.word	0x08001f9f
 8001d50:	08001f9f 	.word	0x08001f9f
 8001d54:	08001f9f 	.word	0x08001f9f
 8001d58:	08001f9f 	.word	0x08001f9f
 8001d5c:	08001d93 	.word	0x08001d93
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001d60:	4b94      	ldr	r3, [pc, #592]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0320 	and.w	r3, r3, #32
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d009      	beq.n	8001d80 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001d6c:	4b91      	ldr	r3, [pc, #580]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	08db      	lsrs	r3, r3, #3
 8001d72:	f003 0303 	and.w	r3, r3, #3
 8001d76:	4a90      	ldr	r2, [pc, #576]	@ (8001fb8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001d78:	fa22 f303 	lsr.w	r3, r2, r3
 8001d7c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001d7e:	e111      	b.n	8001fa4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001d80:	4b8d      	ldr	r3, [pc, #564]	@ (8001fb8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001d82:	61bb      	str	r3, [r7, #24]
      break;
 8001d84:	e10e      	b.n	8001fa4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001d86:	4b8d      	ldr	r3, [pc, #564]	@ (8001fbc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001d88:	61bb      	str	r3, [r7, #24]
      break;
 8001d8a:	e10b      	b.n	8001fa4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001d8c:	4b8c      	ldr	r3, [pc, #560]	@ (8001fc0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001d8e:	61bb      	str	r3, [r7, #24]
      break;
 8001d90:	e108      	b.n	8001fa4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001d92:	4b88      	ldr	r3, [pc, #544]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d96:	f003 0303 	and.w	r3, r3, #3
 8001d9a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001d9c:	4b85      	ldr	r3, [pc, #532]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001da0:	091b      	lsrs	r3, r3, #4
 8001da2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001da6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001da8:	4b82      	ldr	r3, [pc, #520]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001db2:	4b80      	ldr	r3, [pc, #512]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001db4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001db6:	08db      	lsrs	r3, r3, #3
 8001db8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001dbc:	68fa      	ldr	r2, [r7, #12]
 8001dbe:	fb02 f303 	mul.w	r3, r2, r3
 8001dc2:	ee07 3a90 	vmov	s15, r3
 8001dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dca:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	f000 80e1 	beq.w	8001f98 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	f000 8083 	beq.w	8001ee4 <HAL_RCC_GetSysClockFreq+0x204>
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	f200 80a1 	bhi.w	8001f28 <HAL_RCC_GetSysClockFreq+0x248>
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d003      	beq.n	8001df4 <HAL_RCC_GetSysClockFreq+0x114>
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d056      	beq.n	8001ea0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001df2:	e099      	b.n	8001f28 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001df4:	4b6f      	ldr	r3, [pc, #444]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0320 	and.w	r3, r3, #32
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d02d      	beq.n	8001e5c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001e00:	4b6c      	ldr	r3, [pc, #432]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	08db      	lsrs	r3, r3, #3
 8001e06:	f003 0303 	and.w	r3, r3, #3
 8001e0a:	4a6b      	ldr	r2, [pc, #428]	@ (8001fb8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e10:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	ee07 3a90 	vmov	s15, r3
 8001e18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	ee07 3a90 	vmov	s15, r3
 8001e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e2a:	4b62      	ldr	r3, [pc, #392]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e32:	ee07 3a90 	vmov	s15, r3
 8001e36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e3e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8001fc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001e4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e56:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001e5a:	e087      	b.n	8001f6c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	ee07 3a90 	vmov	s15, r3
 8001e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e66:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8001fc8 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001e6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e6e:	4b51      	ldr	r3, [pc, #324]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e76:	ee07 3a90 	vmov	s15, r3
 8001e7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e82:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8001fc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001e92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e9a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001e9e:	e065      	b.n	8001f6c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	ee07 3a90 	vmov	s15, r3
 8001ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eaa:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8001fcc <HAL_RCC_GetSysClockFreq+0x2ec>
 8001eae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001eb2:	4b40      	ldr	r3, [pc, #256]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001eba:	ee07 3a90 	vmov	s15, r3
 8001ebe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ec2:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ec6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8001fc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001eca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ece:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ed2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001ed6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ede:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001ee2:	e043      	b.n	8001f6c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	ee07 3a90 	vmov	s15, r3
 8001eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eee:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8001fd0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001ef2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ef6:	4b2f      	ldr	r3, [pc, #188]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001efe:	ee07 3a90 	vmov	s15, r3
 8001f02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f06:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f0a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8001fc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f22:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001f26:	e021      	b.n	8001f6c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	ee07 3a90 	vmov	s15, r3
 8001f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f32:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8001fcc <HAL_RCC_GetSysClockFreq+0x2ec>
 8001f36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f3a:	4b1e      	ldr	r3, [pc, #120]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f42:	ee07 3a90 	vmov	s15, r3
 8001f46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f4e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8001fc4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f66:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001f6a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8001f6c:	4b11      	ldr	r3, [pc, #68]	@ (8001fb4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f70:	0a5b      	lsrs	r3, r3, #9
 8001f72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f76:	3301      	adds	r3, #1
 8001f78:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	ee07 3a90 	vmov	s15, r3
 8001f80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f84:	edd7 6a07 	vldr	s13, [r7, #28]
 8001f88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f90:	ee17 3a90 	vmov	r3, s15
 8001f94:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8001f96:	e005      	b.n	8001fa4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	61bb      	str	r3, [r7, #24]
      break;
 8001f9c:	e002      	b.n	8001fa4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8001f9e:	4b07      	ldr	r3, [pc, #28]	@ (8001fbc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001fa0:	61bb      	str	r3, [r7, #24]
      break;
 8001fa2:	bf00      	nop
  }

  return sysclockfreq;
 8001fa4:	69bb      	ldr	r3, [r7, #24]
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3724      	adds	r7, #36	@ 0x24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	58024400 	.word	0x58024400
 8001fb8:	03d09000 	.word	0x03d09000
 8001fbc:	003d0900 	.word	0x003d0900
 8001fc0:	017d7840 	.word	0x017d7840
 8001fc4:	46000000 	.word	0x46000000
 8001fc8:	4c742400 	.word	0x4c742400
 8001fcc:	4a742400 	.word	0x4a742400
 8001fd0:	4bbebc20 	.word	0x4bbebc20

08001fd4 <LL_GPIO_SetPinMode>:
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6819      	ldr	r1, [r3, #0]
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	fb03 f203 	mul.w	r2, r3, r3
 8001fea:	4613      	mov	r3, r2
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	4413      	add	r3, r2
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	ea01 0203 	and.w	r2, r1, r3
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	fb03 f303 	mul.w	r3, r3, r3
 8001ffc:	6879      	ldr	r1, [r7, #4]
 8001ffe:	fb01 f303 	mul.w	r3, r1, r3
 8002002:	431a      	orrs	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	601a      	str	r2, [r3, #0]
}
 8002008:	bf00      	nop
 800200a:	3714      	adds	r7, #20
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <LL_GPIO_SetPinOutputType>:
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	685a      	ldr	r2, [r3, #4]
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	43db      	mvns	r3, r3
 8002028:	401a      	ands	r2, r3
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	fb01 f303 	mul.w	r3, r1, r3
 8002032:	431a      	orrs	r2, r3
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	605a      	str	r2, [r3, #4]
}
 8002038:	bf00      	nop
 800203a:	3714      	adds	r7, #20
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <LL_GPIO_SetPinSpeed>:
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6899      	ldr	r1, [r3, #8]
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	fb03 f203 	mul.w	r2, r3, r3
 800205a:	4613      	mov	r3, r2
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	4413      	add	r3, r2
 8002060:	43db      	mvns	r3, r3
 8002062:	ea01 0203 	and.w	r2, r1, r3
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	fb03 f303 	mul.w	r3, r3, r3
 800206c:	6879      	ldr	r1, [r7, #4]
 800206e:	fb01 f303 	mul.w	r3, r1, r3
 8002072:	431a      	orrs	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	609a      	str	r2, [r3, #8]
}
 8002078:	bf00      	nop
 800207a:	3714      	adds	r7, #20
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <LL_GPIO_SetPinPull>:
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	68d9      	ldr	r1, [r3, #12]
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	fb03 f203 	mul.w	r2, r3, r3
 800209a:	4613      	mov	r3, r2
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	4413      	add	r3, r2
 80020a0:	43db      	mvns	r3, r3
 80020a2:	ea01 0203 	and.w	r2, r1, r3
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	fb03 f303 	mul.w	r3, r3, r3
 80020ac:	6879      	ldr	r1, [r7, #4]
 80020ae:	fb01 f303 	mul.w	r3, r1, r3
 80020b2:	431a      	orrs	r2, r3
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	60da      	str	r2, [r3, #12]
}
 80020b8:	bf00      	nop
 80020ba:	3714      	adds	r7, #20
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <LL_GPIO_SetAFPin_0_7>:
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6a19      	ldr	r1, [r3, #32]
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	fb03 f303 	mul.w	r3, r3, r3
 80020da:	68ba      	ldr	r2, [r7, #8]
 80020dc:	fb02 f303 	mul.w	r3, r2, r3
 80020e0:	68ba      	ldr	r2, [r7, #8]
 80020e2:	fb03 f202 	mul.w	r2, r3, r2
 80020e6:	4613      	mov	r3, r2
 80020e8:	011b      	lsls	r3, r3, #4
 80020ea:	1a9b      	subs	r3, r3, r2
 80020ec:	43db      	mvns	r3, r3
 80020ee:	ea01 0203 	and.w	r2, r1, r3
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	fb03 f303 	mul.w	r3, r3, r3
 80020f8:	68b9      	ldr	r1, [r7, #8]
 80020fa:	fb01 f303 	mul.w	r3, r1, r3
 80020fe:	68b9      	ldr	r1, [r7, #8]
 8002100:	fb01 f303 	mul.w	r3, r1, r3
 8002104:	6879      	ldr	r1, [r7, #4]
 8002106:	fb01 f303 	mul.w	r3, r1, r3
 800210a:	431a      	orrs	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	621a      	str	r2, [r3, #32]
}
 8002110:	bf00      	nop
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <LL_GPIO_SetAFPin_8_15>:
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	0a1b      	lsrs	r3, r3, #8
 8002130:	68ba      	ldr	r2, [r7, #8]
 8002132:	0a12      	lsrs	r2, r2, #8
 8002134:	fb02 f303 	mul.w	r3, r2, r3
 8002138:	68ba      	ldr	r2, [r7, #8]
 800213a:	0a12      	lsrs	r2, r2, #8
 800213c:	fb02 f303 	mul.w	r3, r2, r3
 8002140:	68ba      	ldr	r2, [r7, #8]
 8002142:	0a12      	lsrs	r2, r2, #8
 8002144:	fb03 f202 	mul.w	r2, r3, r2
 8002148:	4613      	mov	r3, r2
 800214a:	011b      	lsls	r3, r3, #4
 800214c:	1a9b      	subs	r3, r3, r2
 800214e:	43db      	mvns	r3, r3
 8002150:	ea01 0203 	and.w	r2, r1, r3
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	0a1b      	lsrs	r3, r3, #8
 8002158:	68b9      	ldr	r1, [r7, #8]
 800215a:	0a09      	lsrs	r1, r1, #8
 800215c:	fb01 f303 	mul.w	r3, r1, r3
 8002160:	68b9      	ldr	r1, [r7, #8]
 8002162:	0a09      	lsrs	r1, r1, #8
 8002164:	fb01 f303 	mul.w	r3, r1, r3
 8002168:	68b9      	ldr	r1, [r7, #8]
 800216a:	0a09      	lsrs	r1, r1, #8
 800216c:	fb01 f303 	mul.w	r3, r1, r3
 8002170:	6879      	ldr	r1, [r7, #4]
 8002172:	fb01 f303 	mul.w	r3, r1, r3
 8002176:	431a      	orrs	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800217c:	bf00      	nop
 800217e:	3714      	adds	r7, #20
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b088      	sub	sp, #32
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	fa93 f3a3 	rbit	r3, r3
 800219e:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <LL_GPIO_Init+0x26>
  {
    return 32U;
 80021aa:	2320      	movs	r3, #32
 80021ac:	e003      	b.n	80021b6 <LL_GPIO_Init+0x2e>
  }
  return __builtin_clz(value);
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	fab3 f383 	clz	r3, r3
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80021b8:	e048      	b.n	800224c <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	2101      	movs	r1, #1
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	fa01 f303 	lsl.w	r3, r1, r3
 80021c6:	4013      	ands	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00000000U)
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d03a      	beq.n	8002246 <LL_GPIO_Init+0xbe>
    {

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d003      	beq.n	80021e0 <LL_GPIO_Init+0x58>
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d10e      	bne.n	80021fe <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	461a      	mov	r2, r3
 80021e6:	69b9      	ldr	r1, [r7, #24]
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f7ff ff2b 	bl	8002044 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	6819      	ldr	r1, [r3, #0]
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	461a      	mov	r2, r3
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f7ff ff0b 	bl	8002014 <LL_GPIO_SetPinOutputType>

      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	461a      	mov	r2, r3
 8002204:	69b9      	ldr	r1, [r7, #24]
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f7ff ff3c 	bl	8002084 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	2b02      	cmp	r3, #2
 8002212:	d111      	bne.n	8002238 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	2bff      	cmp	r3, #255	@ 0xff
 8002218:	d807      	bhi.n	800222a <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	461a      	mov	r2, r3
 8002220:	69b9      	ldr	r1, [r7, #24]
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f7ff ff4e 	bl	80020c4 <LL_GPIO_SetAFPin_0_7>
 8002228:	e006      	b.n	8002238 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	461a      	mov	r2, r3
 8002230:	69b9      	ldr	r1, [r7, #24]
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7ff ff72 	bl	800211c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	461a      	mov	r2, r3
 800223e:	69b9      	ldr	r1, [r7, #24]
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f7ff fec7 	bl	8001fd4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	3301      	adds	r3, #1
 800224a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	fa22 f303 	lsr.w	r3, r2, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1af      	bne.n	80021ba <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3720      	adds	r7, #32
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t count = Delay;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002270:	4b0f      	ldr	r3, [pc, #60]	@ (80022b0 <LL_mDelay+0x4c>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	60bb      	str	r3, [r7, #8]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8002276:	68bb      	ldr	r3, [r7, #8]

  /* Add a period to guaranty minimum wait */
  if(count < LL_MAX_DELAY)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800227e:	d00c      	beq.n	800229a <LL_mDelay+0x36>
  {
    count++;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	3301      	adds	r3, #1
 8002284:	60fb      	str	r3, [r7, #12]
  }

  while (count != 0U)
 8002286:	e008      	b.n	800229a <LL_mDelay+0x36>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002288:	4b09      	ldr	r3, [pc, #36]	@ (80022b0 <LL_mDelay+0x4c>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d002      	beq.n	800229a <LL_mDelay+0x36>
    {
      count--;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	3b01      	subs	r3, #1
 8002298:	60fb      	str	r3, [r7, #12]
  while (count != 0U)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1f3      	bne.n	8002288 <LL_mDelay+0x24>
    }
  }
}
 80022a0:	bf00      	nop
 80022a2:	bf00      	nop
 80022a4:	3714      	adds	r7, #20
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	e000e010 	.word	0xe000e010

080022b4 <memset>:
 80022b4:	4402      	add	r2, r0
 80022b6:	4603      	mov	r3, r0
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d100      	bne.n	80022be <memset+0xa>
 80022bc:	4770      	bx	lr
 80022be:	f803 1b01 	strb.w	r1, [r3], #1
 80022c2:	e7f9      	b.n	80022b8 <memset+0x4>

080022c4 <__libc_init_array>:
 80022c4:	b570      	push	{r4, r5, r6, lr}
 80022c6:	4d0d      	ldr	r5, [pc, #52]	@ (80022fc <__libc_init_array+0x38>)
 80022c8:	4c0d      	ldr	r4, [pc, #52]	@ (8002300 <__libc_init_array+0x3c>)
 80022ca:	1b64      	subs	r4, r4, r5
 80022cc:	10a4      	asrs	r4, r4, #2
 80022ce:	2600      	movs	r6, #0
 80022d0:	42a6      	cmp	r6, r4
 80022d2:	d109      	bne.n	80022e8 <__libc_init_array+0x24>
 80022d4:	4d0b      	ldr	r5, [pc, #44]	@ (8002304 <__libc_init_array+0x40>)
 80022d6:	4c0c      	ldr	r4, [pc, #48]	@ (8002308 <__libc_init_array+0x44>)
 80022d8:	f000 f818 	bl	800230c <_init>
 80022dc:	1b64      	subs	r4, r4, r5
 80022de:	10a4      	asrs	r4, r4, #2
 80022e0:	2600      	movs	r6, #0
 80022e2:	42a6      	cmp	r6, r4
 80022e4:	d105      	bne.n	80022f2 <__libc_init_array+0x2e>
 80022e6:	bd70      	pop	{r4, r5, r6, pc}
 80022e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80022ec:	4798      	blx	r3
 80022ee:	3601      	adds	r6, #1
 80022f0:	e7ee      	b.n	80022d0 <__libc_init_array+0xc>
 80022f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80022f6:	4798      	blx	r3
 80022f8:	3601      	adds	r6, #1
 80022fa:	e7f2      	b.n	80022e2 <__libc_init_array+0x1e>
 80022fc:	08002344 	.word	0x08002344
 8002300:	08002344 	.word	0x08002344
 8002304:	08002344 	.word	0x08002344
 8002308:	08002348 	.word	0x08002348

0800230c <_init>:
 800230c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800230e:	bf00      	nop
 8002310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002312:	bc08      	pop	{r3}
 8002314:	469e      	mov	lr, r3
 8002316:	4770      	bx	lr

08002318 <_fini>:
 8002318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800231a:	bf00      	nop
 800231c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800231e:	bc08      	pop	{r3}
 8002320:	469e      	mov	lr, r3
 8002322:	4770      	bx	lr
